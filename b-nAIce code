{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "Read_Streaming_Twitter_HateBlockers_b_nAIce.ipynb",
      "provenance": [],
      "collapsed_sections": []
    },
    "kernelspec": {
      "display_name": "Python 3",
      "name": "python3"
    },
    "language_info": {
      "name": "python"
    },
    "accelerator": "GPU",
    "widgets": {
      "application/vnd.jupyter.widget-state+json": {
        "0aedd85ea04d4e5db55aaf27553a2917": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HBoxModel",
          "state": {
            "_view_name": "HBoxView",
            "_dom_classes": [],
            "_model_name": "HBoxModel",
            "_view_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_view_count": null,
            "_view_module_version": "1.5.0",
            "box_style": "",
            "layout": "IPY_MODEL_55aae95f962a4a86b15ab6cf5fc4cf08",
            "_model_module": "@jupyter-widgets/controls",
            "children": [
              "IPY_MODEL_6739bb4495f6470188912d3df984e38b",
              "IPY_MODEL_4b2ae3905af94da8a65cb3f306d71e1f"
            ]
          }
        },
        "55aae95f962a4a86b15ab6cf5fc4cf08": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "state": {
            "_view_name": "LayoutView",
            "grid_template_rows": null,
            "right": null,
            "justify_content": null,
            "_view_module": "@jupyter-widgets/base",
            "overflow": null,
            "_model_module_version": "1.2.0",
            "_view_count": null,
            "flex_flow": null,
            "width": null,
            "min_width": null,
            "border": null,
            "align_items": null,
            "bottom": null,
            "_model_module": "@jupyter-widgets/base",
            "top": null,
            "grid_column": null,
            "overflow_y": null,
            "overflow_x": null,
            "grid_auto_flow": null,
            "grid_area": null,
            "grid_template_columns": null,
            "flex": null,
            "_model_name": "LayoutModel",
            "justify_items": null,
            "grid_row": null,
            "max_height": null,
            "align_content": null,
            "visibility": null,
            "align_self": null,
            "height": null,
            "min_height": null,
            "padding": null,
            "grid_auto_rows": null,
            "grid_gap": null,
            "max_width": null,
            "order": null,
            "_view_module_version": "1.2.0",
            "grid_template_areas": null,
            "object_position": null,
            "object_fit": null,
            "grid_auto_columns": null,
            "margin": null,
            "display": null,
            "left": null
          }
        },
        "6739bb4495f6470188912d3df984e38b": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "FloatProgressModel",
          "state": {
            "_view_name": "ProgressView",
            "style": "IPY_MODEL_166628b0d75d4248bae9f0bc897496f9",
            "_dom_classes": [],
            "description": "100%",
            "_model_name": "FloatProgressModel",
            "bar_style": "success",
            "max": 1,
            "_view_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "value": 1,
            "_view_count": null,
            "_view_module_version": "1.5.0",
            "orientation": "horizontal",
            "min": 0,
            "description_tooltip": null,
            "_model_module": "@jupyter-widgets/controls",
            "layout": "IPY_MODEL_cbb90ac05d70446d94a9d1405c491814"
          }
        },
        "4b2ae3905af94da8a65cb3f306d71e1f": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "state": {
            "_view_name": "HTMLView",
            "style": "IPY_MODEL_1c2c357dfddb4b879e8bc60e3735f012",
            "_dom_classes": [],
            "description": "",
            "_model_name": "HTMLModel",
            "placeholder": "​",
            "_view_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "value": " 1/1 [00:22&lt;00:00, 22.43s/ba]",
            "_view_count": null,
            "_view_module_version": "1.5.0",
            "description_tooltip": null,
            "_model_module": "@jupyter-widgets/controls",
            "layout": "IPY_MODEL_376f2648f48243ba8dc1ba8bb6b08ddd"
          }
        },
        "166628b0d75d4248bae9f0bc897496f9": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "ProgressStyleModel",
          "state": {
            "_view_name": "StyleView",
            "_model_name": "ProgressStyleModel",
            "description_width": "initial",
            "_view_module": "@jupyter-widgets/base",
            "_model_module_version": "1.5.0",
            "_view_count": null,
            "_view_module_version": "1.2.0",
            "bar_color": null,
            "_model_module": "@jupyter-widgets/controls"
          }
        },
        "cbb90ac05d70446d94a9d1405c491814": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "state": {
            "_view_name": "LayoutView",
            "grid_template_rows": null,
            "right": null,
            "justify_content": null,
            "_view_module": "@jupyter-widgets/base",
            "overflow": null,
            "_model_module_version": "1.2.0",
            "_view_count": null,
            "flex_flow": null,
            "width": null,
            "min_width": null,
            "border": null,
            "align_items": null,
            "bottom": null,
            "_model_module": "@jupyter-widgets/base",
            "top": null,
            "grid_column": null,
            "overflow_y": null,
            "overflow_x": null,
            "grid_auto_flow": null,
            "grid_area": null,
            "grid_template_columns": null,
            "flex": null,
            "_model_name": "LayoutModel",
            "justify_items": null,
            "grid_row": null,
            "max_height": null,
            "align_content": null,
            "visibility": null,
            "align_self": null,
            "height": null,
            "min_height": null,
            "padding": null,
            "grid_auto_rows": null,
            "grid_gap": null,
            "max_width": null,
            "order": null,
            "_view_module_version": "1.2.0",
            "grid_template_areas": null,
            "object_position": null,
            "object_fit": null,
            "grid_auto_columns": null,
            "margin": null,
            "display": null,
            "left": null
          }
        },
        "1c2c357dfddb4b879e8bc60e3735f012": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "state": {
            "_view_name": "StyleView",
            "_model_name": "DescriptionStyleModel",
            "description_width": "",
            "_view_module": "@jupyter-widgets/base",
            "_model_module_version": "1.5.0",
            "_view_count": null,
            "_view_module_version": "1.2.0",
            "_model_module": "@jupyter-widgets/controls"
          }
        },
        "376f2648f48243ba8dc1ba8bb6b08ddd": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "state": {
            "_view_name": "LayoutView",
            "grid_template_rows": null,
            "right": null,
            "justify_content": null,
            "_view_module": "@jupyter-widgets/base",
            "overflow": null,
            "_model_module_version": "1.2.0",
            "_view_count": null,
            "flex_flow": null,
            "width": null,
            "min_width": null,
            "border": null,
            "align_items": null,
            "bottom": null,
            "_model_module": "@jupyter-widgets/base",
            "top": null,
            "grid_column": null,
            "overflow_y": null,
            "overflow_x": null,
            "grid_auto_flow": null,
            "grid_area": null,
            "grid_template_columns": null,
            "flex": null,
            "_model_name": "LayoutModel",
            "justify_items": null,
            "grid_row": null,
            "max_height": null,
            "align_content": null,
            "visibility": null,
            "align_self": null,
            "height": null,
            "min_height": null,
            "padding": null,
            "grid_auto_rows": null,
            "grid_gap": null,
            "max_width": null,
            "order": null,
            "_view_module_version": "1.2.0",
            "grid_template_areas": null,
            "object_position": null,
            "object_fit": null,
            "grid_auto_columns": null,
            "margin": null,
            "display": null,
            "left": null
          }
        }
      }
    }
  },
  "cells": [
    {
      "cell_type": "code",
      "metadata": {
        "id": "FcwJ4tv-QQi_"
      },
      "source": [
        "# Importing all the modules that we're going to use\n",
        "\n",
        "import tweepy\n",
        "from wordcloud import WordCloud\n",
        "\n",
        "import pandas as pd\n",
        "import numpy as np\n",
        "import re\n",
        "import json\n",
        "import nltk\n",
        "from nltk.corpus import stopwords\n",
        "\n",
        "import datetime\n",
        "from PIL import Image \n",
        "\n",
        "import matplotlib\n",
        "import matplotlib.pyplot as plt"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "StPZs5N1sCf5"
      },
      "source": [
        "# 1 ) Geeting the streming tweets"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "n_EbOTRHQU_g"
      },
      "source": [
        "# API credential \n",
        "\n",
        "consumerKey = 'cuTAcXKYLVStp3oeeQB0jC00Y'\n",
        "consumerSecret = 'A3IuDS3AULUxDcIFBXl8uxhSMge0ujvLfQxTd3MLeLzwJ1t5e5'\n",
        "accessToken = '1228277127344279554-lyO3iok2TTjYq6Bc5c864RUqDRDlsu'\n",
        "accessTokenSecret = 'fXFnpXnK1NrXGz0HJy6HUMzpHCkEv4iRKOMzj5tZmOKRY'"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "xd-fVR9xQXJP"
      },
      "source": [
        "# Authentication object\n",
        "auth = tweepy.OAuthHandler(consumerKey, consumerSecret)\n",
        "\n",
        "# Setting the access token and access token secret\n",
        "auth.set_access_token(accessToken, accessTokenSecret)\n",
        "\n",
        "# Creating the API object. We pass the authentication object.\n",
        "# With wait_on_rate_limit = True, if you reach the limit of tweets read, it waits until you can continue\n",
        "api = tweepy.API(auth, wait_on_rate_limit = True, wait_on_rate_limit_notify = True)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 453
        },
        "id": "YSjUZg0cQZBR",
        "outputId": "03afe1a4-dd1d-4eba-efc8-bfea1504b076"
      },
      "source": [
        "# Getting the tweets in streaming \n",
        "\n",
        "tweets = [] # Empty list to save the read tweets\n",
        "created_at_list = []\n",
        "run_time = datetime.datetime.now() + datetime.timedelta(hours=2)\n",
        "screen_names = []\n",
        "ids = []\n",
        "\n",
        "# Define the time when you start to run this code (time_start) and when you are going to stop (time_end)\n",
        "# Note: If you are in summer time, we have to include 2 hours, if not, comment # + datetime.timedelta(hours=2)\n",
        "time_start = pd.to_datetime('2021-06-16 10:33:00+0000') + datetime.timedelta(hours=2)\n",
        "time_end = pd.to_datetime('2021-06-16 10:35:00+0000') + datetime.timedelta(hours=2)\n",
        "class TweetsListener(tweepy.StreamListener): # This class inherits from tweepy.StreamListener\n",
        "  \n",
        "    def on_connect(self):\n",
        "        print(\"I'm connected\") # Message to be displayed when the connection starts\n",
        "        \n",
        "    def on_data(self,data): \n",
        "        \n",
        "      global time_start\n",
        "      global time_end  \n",
        "\n",
        "      try:\n",
        "        created_at = pd.to_datetime(json.loads(data)['created_at']) + datetime.timedelta(hours=2)\n",
        "      except:\n",
        "        created_at = np.nan\n",
        "\n",
        "      if (created_at<time_start):\n",
        "        print(created_at)\n",
        "        print(time_start)\n",
        "        print('Not yet')\n",
        "\n",
        "      elif (created_at >= time_start) & (created_at<=time_end): # if actual time is between time_star and time_stop, we get the tweets\n",
        "        \n",
        "        try:\n",
        "\n",
        "          text = json.loads(data)['text'] # Getting tweet text\n",
        "          text = re.sub(r'(?<=^|(?<=[^a-zA-Z0-9-_\\.]))@([A-Za-z]+[A-Za-z0-9-_]+)', 'MENCION',text) # Removing @mentions\n",
        "          text = re.sub(r'#','',text) # Removing the '#' symbol\n",
        "          text = re.sub(r':','',text) # Removing the ':' symbol\n",
        "          text = re.sub(r'RT[\\s]+','',text) #Removing the 'RT' word\n",
        "          text = re.sub(r\"http\\S+\",'ENLACE',text) #Removing hyperlinks\n",
        "          emoji = re.compile(\"[\"\n",
        "              u\"\\U0001F600-\\U0001F64F\"  \n",
        "              u\"\\U0001F300-\\U0001F5FF\"  \n",
        "              u\"\\U0001F680-\\U0001F6FF\"  \n",
        "              u\"\\U0001F1E0-\\U0001F1FF\"  \n",
        "              u\"\\U00002500-\\U00002BEF\"  \n",
        "              u\"\\U00002702-\\U000027B0\"\n",
        "              u\"\\U00002702-\\U000027B0\"\n",
        "              u\"\\U000024C2-\\U0001F251\"\n",
        "              u\"\\U0001f926-\\U0001f937\"\n",
        "              u\"\\U00010000-\\U0010ffff\"\n",
        "              u\"\\u2640-\\u2642\" \n",
        "              u\"\\u2600-\\u2B55\"\n",
        "              u\"\\u200d\"\n",
        "              u\"\\u23cf\"\n",
        "              u\"\\u23e9\"\n",
        "              u\"\\u231a\"\n",
        "              u\"\\ufe0f\"  \n",
        "              u\"\\u3030\"\n",
        "                            \"]+\", re.UNICODE) \n",
        "          text = re.sub(emoji, '', text) # Removing emoticons\n",
        "          \n",
        "          print(text) # Printing the tweets' text\n",
        "          \n",
        "          try:\n",
        "            screen_name = json.loads(data)['user']['screen_name'] # Getting the screen name\n",
        "          except:\n",
        "            screen_name = np.nan\n",
        "\n",
        "          print(created_at)\n",
        "\n",
        "          try:\n",
        "            id = json.loads(data)['id']\n",
        "          except:\n",
        "            id = np.nan\n",
        "\n",
        "          global tweets\n",
        "          \n",
        "          tweets.append(text) # Appending the tweet text to tweets list\n",
        "          \n",
        "          global screen_names\n",
        "          \n",
        "          screen_names.append(screen_name) # Appending the screen name\n",
        "\n",
        "          global created_at_list\n",
        "          \n",
        "          created_at_list.append(created_at) # Appending the created at          \n",
        "          \n",
        "          global ids\n",
        "\n",
        "          ids.append(id) # Appending the tweet text to tweets list   \n",
        "          global run_time\n",
        "\n",
        "\n",
        "\n",
        "          d = {'ID':ids,'Text':tweets,'Created time':created_at_list,'Screen name':screen_names,'Run time':run_time} # Declaring the variable d to later create the dataframe\n",
        "\n",
        "          global df\n",
        "          \n",
        "          df = pd.DataFrame(data=d) # Creating the df dataframe with the Tweets column containing all the tweets' texts\n",
        "\n",
        "        except:\n",
        "            print('An error occurred while reading this tweet') # Message to be displayed when there is an error reading tweets data\n",
        "      else:\n",
        "        print('End')\n",
        "        \n",
        "    def on_error(self,status_code):\n",
        "        print(\"Error\",status_code) # Message to be displayed when there is an error\n",
        "        \n",
        "stream = TweetsListener() # Creating an instance of TweetsListener()\n",
        "streamingApi = tweepy.Stream(auth=api.auth,listener=stream) \n",
        "\n",
        "\n",
        "# streamingApi.filter(track=['Trump']) # Example of filter 'Trump'--> It could be useful if there is a controversial issue\n",
        "\n",
        "# Define the locations of interest \n",
        "españa = (-7.3020773834,35.9456058548,4.6256198979,43.6067257271)\n",
        "galicia = (-9.3723347522,41.8473569049,-6.1494134623,43.8631287919)\n",
        "canarias = (-18.2571112753,27.5377487071,-13.3342440189,29.3572440098)\n",
        "#aragon = (-1.9954655388,40.2740375036,0.1709293675,42.6553366557)\n",
        "\n",
        "# Apply the filter to the locations \n",
        "streamingApi.filter(locations = españa)\n",
        "streamingApi.filter(locations = galicia)\n",
        "streamingApi.filter(locations = canarias)\n",
        "\n",
        "# Now we only have to run the script when the XXXXX starts and we will stop it when it ends."
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "I'm connected\n",
            "End\n",
            "End\n",
            "End\n",
            "End\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "error",
          "ename": "KeyboardInterrupt",
          "evalue": "ignored",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mKeyboardInterrupt\u001b[0m                         Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-37-a9dd81434c37>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m    123\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    124\u001b[0m \u001b[0;31m# Apply the filter to the locations\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 125\u001b[0;31m \u001b[0mstreamingApi\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfilter\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mlocations\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mespaña\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    126\u001b[0m \u001b[0mstreamingApi\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfilter\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mlocations\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mgalicia\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    127\u001b[0m \u001b[0mstreamingApi\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfilter\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mlocations\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mcanarias\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.7/dist-packages/tweepy/streaming.py\u001b[0m in \u001b[0;36mfilter\u001b[0;34m(self, follow, track, is_async, locations, stall_warnings, languages, encoding, filter_level)\u001b[0m\n\u001b[1;32m    472\u001b[0m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mbody\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'filter_level'\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mfilter_level\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mencode\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mencoding\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    473\u001b[0m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msession\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mparams\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m{\u001b[0m\u001b[0;34m'delimited'\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0;34m'length'\u001b[0m\u001b[0;34m}\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 474\u001b[0;31m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_start\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mis_async\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    475\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    476\u001b[0m     def sitestream(self, follow, stall_warnings=False,\n",
            "\u001b[0;32m/usr/local/lib/python3.7/dist-packages/tweepy/streaming.py\u001b[0m in \u001b[0;36m_start\u001b[0;34m(self, is_async)\u001b[0m\n\u001b[1;32m    387\u001b[0m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_thread\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mstart\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    388\u001b[0m         \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 389\u001b[0;31m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_run\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    390\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    391\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0mon_closed\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mresp\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.7/dist-packages/tweepy/streaming.py\u001b[0m in \u001b[0;36m_run\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m    287\u001b[0m                     \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msnooze_time\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msnooze_time_step\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    288\u001b[0m                     \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mlistener\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mon_connect\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 289\u001b[0;31m                     \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_read_loop\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mresp\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    290\u001b[0m             \u001b[0;32mexcept\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0mTimeout\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mssl\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mSSLError\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0mexc\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    291\u001b[0m                 \u001b[0;31m# This is still necessary, as a SSLError can actually be\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.7/dist-packages/tweepy/streaming.py\u001b[0m in \u001b[0;36m_read_loop\u001b[0;34m(self, resp)\u001b[0m\n\u001b[1;32m    337\u001b[0m             \u001b[0mlength\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;36m0\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    338\u001b[0m             \u001b[0;32mwhile\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0mresp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mraw\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mclosed\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 339\u001b[0;31m                 \u001b[0mline\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mbuf\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mread_line\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    340\u001b[0m                 \u001b[0mstripped_line\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mline\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mstrip\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mif\u001b[0m \u001b[0mline\u001b[0m \u001b[0;32melse\u001b[0m \u001b[0mline\u001b[0m \u001b[0;31m# line is sometimes None so we need to check here\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    341\u001b[0m                 \u001b[0;32mif\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0mstripped_line\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.7/dist-packages/tweepy/streaming.py\u001b[0m in \u001b[0;36mread_line\u001b[0;34m(self, sep)\u001b[0m\n\u001b[1;32m    198\u001b[0m             \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    199\u001b[0m                 \u001b[0mstart\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mlen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_buffer\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 200\u001b[0;31m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_buffer\u001b[0m \u001b[0;34m+=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_stream\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mread\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_chunk_size\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    201\u001b[0m         \u001b[0;32mreturn\u001b[0m \u001b[0msix\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mb\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m''\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    202\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.7/dist-packages/urllib3/response.py\u001b[0m in \u001b[0;36mread\u001b[0;34m(self, amt, decode_content, cache_content)\u001b[0m\n\u001b[1;32m    442\u001b[0m             \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    443\u001b[0m                 \u001b[0mcache_content\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;32mFalse\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 444\u001b[0;31m                 \u001b[0mdata\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_fp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mread\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mamt\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    445\u001b[0m                 \u001b[0;32mif\u001b[0m \u001b[0mamt\u001b[0m \u001b[0;34m!=\u001b[0m \u001b[0;36m0\u001b[0m \u001b[0;32mand\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0mdata\u001b[0m\u001b[0;34m:\u001b[0m  \u001b[0;31m# Platform-specific: Buggy versions of Python.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    446\u001b[0m                     \u001b[0;31m# Close the connection when no data is returned\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/lib/python3.7/http/client.py\u001b[0m in \u001b[0;36mread\u001b[0;34m(self, amt)\u001b[0m\n\u001b[1;32m    459\u001b[0m             \u001b[0;31m# Amount is given, implement using readinto\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    460\u001b[0m             \u001b[0mb\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mbytearray\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mamt\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 461\u001b[0;31m             \u001b[0mn\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mreadinto\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mb\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    462\u001b[0m             \u001b[0;32mreturn\u001b[0m \u001b[0mmemoryview\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mb\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0mn\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtobytes\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    463\u001b[0m         \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/lib/python3.7/http/client.py\u001b[0m in \u001b[0;36mreadinto\u001b[0;34m(self, b)\u001b[0m\n\u001b[1;32m    493\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    494\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mchunked\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 495\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_readinto_chunked\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mb\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    496\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    497\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mlength\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/lib/python3.7/http/client.py\u001b[0m in \u001b[0;36m_readinto_chunked\u001b[0;34m(self, b)\u001b[0m\n\u001b[1;32m    588\u001b[0m         \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    589\u001b[0m             \u001b[0;32mwhile\u001b[0m \u001b[0;32mTrue\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 590\u001b[0;31m                 \u001b[0mchunk_left\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_get_chunk_left\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    591\u001b[0m                 \u001b[0;32mif\u001b[0m \u001b[0mchunk_left\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    592\u001b[0m                     \u001b[0;32mreturn\u001b[0m \u001b[0mtotal_bytes\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/lib/python3.7/http/client.py\u001b[0m in \u001b[0;36m_get_chunk_left\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m    556\u001b[0m                 \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_safe_read\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m2\u001b[0m\u001b[0;34m)\u001b[0m  \u001b[0;31m# toss the CRLF at the end of the chunk\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    557\u001b[0m             \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 558\u001b[0;31m                 \u001b[0mchunk_left\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_read_next_chunk_size\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    559\u001b[0m             \u001b[0;32mexcept\u001b[0m \u001b[0mValueError\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    560\u001b[0m                 \u001b[0;32mraise\u001b[0m \u001b[0mIncompleteRead\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34mb''\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/lib/python3.7/http/client.py\u001b[0m in \u001b[0;36m_read_next_chunk_size\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m    516\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m_read_next_chunk_size\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    517\u001b[0m         \u001b[0;31m# Read the next chunk size from the file\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 518\u001b[0;31m         \u001b[0mline\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mreadline\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0m_MAXLINE\u001b[0m \u001b[0;34m+\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    519\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mlen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mline\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m>\u001b[0m \u001b[0m_MAXLINE\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    520\u001b[0m             \u001b[0;32mraise\u001b[0m \u001b[0mLineTooLong\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"chunk size\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/lib/python3.7/socket.py\u001b[0m in \u001b[0;36mreadinto\u001b[0;34m(self, b)\u001b[0m\n\u001b[1;32m    587\u001b[0m         \u001b[0;32mwhile\u001b[0m \u001b[0;32mTrue\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    588\u001b[0m             \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 589\u001b[0;31m                 \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_sock\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mrecv_into\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mb\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    590\u001b[0m             \u001b[0;32mexcept\u001b[0m \u001b[0mtimeout\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    591\u001b[0m                 \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_timeout_occurred\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;32mTrue\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/lib/python3.7/ssl.py\u001b[0m in \u001b[0;36mrecv_into\u001b[0;34m(self, buffer, nbytes, flags)\u001b[0m\n\u001b[1;32m   1069\u001b[0m                   \u001b[0;34m\"non-zero flags not allowed in calls to recv_into() on %s\"\u001b[0m \u001b[0;34m%\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1070\u001b[0m                   self.__class__)\n\u001b[0;32m-> 1071\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mread\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mnbytes\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mbuffer\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1072\u001b[0m         \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1073\u001b[0m             \u001b[0;32mreturn\u001b[0m \u001b[0msuper\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mrecv_into\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mbuffer\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mnbytes\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mflags\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/lib/python3.7/ssl.py\u001b[0m in \u001b[0;36mread\u001b[0;34m(self, len, buffer)\u001b[0m\n\u001b[1;32m    927\u001b[0m         \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    928\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0mbuffer\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 929\u001b[0;31m                 \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_sslobj\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mread\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mlen\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mbuffer\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    930\u001b[0m             \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    931\u001b[0m                 \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_sslobj\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mread\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mlen\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mKeyboardInterrupt\u001b[0m: "
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 415
        },
        "id": "cqNCpqEGayt_",
        "outputId": "fbeaf1db-725b-4765-8508-b0fbdf4738be"
      },
      "source": [
        "# See the new df \n",
        "df.head()"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>ID</th>\n",
              "      <th>Text</th>\n",
              "      <th>Created time</th>\n",
              "      <th>Screen name</th>\n",
              "      <th>Run time</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>1405111160731545602</td>\n",
              "      <td>Gracias MENCIÓN MENCIÓN MENCIÓN por este capít...</td>\n",
              "      <td>2021-06-16 12:33:01+00:00</td>\n",
              "      <td>saratab</td>\n",
              "      <td>2021-06-16 12:32:30.795555</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>1405111168046338049</td>\n",
              "      <td>MENCIÓN Jajajajjajajajajajajajajajajaja</td>\n",
              "      <td>2021-06-16 12:33:02+00:00</td>\n",
              "      <td>manuelRM_6</td>\n",
              "      <td>2021-06-16 12:32:30.795555</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>1405111172177801220</td>\n",
              "      <td>Mañana juega Bélgica de los cojones y me lo vo...</td>\n",
              "      <td>2021-06-16 12:33:03+00:00</td>\n",
              "      <td>DiosChotil</td>\n",
              "      <td>2021-06-16 12:32:30.795555</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>1405111178423058433</td>\n",
              "      <td>temacabezasrubias temabartrastero temaandévalo...</td>\n",
              "      <td>2021-06-16 12:33:05+00:00</td>\n",
              "      <td>ANHAGA53</td>\n",
              "      <td>2021-06-16 12:32:30.795555</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>1405111179056496644</td>\n",
              "      <td>MENCIÓN Creo que esta vez , no solo depende de...</td>\n",
              "      <td>2021-06-16 12:33:05+00:00</td>\n",
              "      <td>MIDDEMCAMP</td>\n",
              "      <td>2021-06-16 12:32:30.795555</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>98</th>\n",
              "      <td>1405111649695145990</td>\n",
              "      <td>MENCIÓN MENCIÓN A tope Gorka! Enhorabuena! Gra...</td>\n",
              "      <td>2021-06-16 12:34:57+00:00</td>\n",
              "      <td>manumgar86</td>\n",
              "      <td>2021-06-16 12:32:30.795555</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>99</th>\n",
              "      <td>1405111655504228354</td>\n",
              "      <td>Nadal juega a la petanca</td>\n",
              "      <td>2021-06-16 12:34:59+00:00</td>\n",
              "      <td>SaulYedrero</td>\n",
              "      <td>2021-06-16 12:32:30.795555</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>100</th>\n",
              "      <td>1405111659505586178</td>\n",
              "      <td>MENCIÓN La mosca negra es molt petita pero fa ...</td>\n",
              "      <td>2021-06-16 12:34:59+00:00</td>\n",
              "      <td>falduko</td>\n",
              "      <td>2021-06-16 12:32:30.795555</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>101</th>\n",
              "      <td>1405111661300699142</td>\n",
              "      <td>MENCIÓN MENCIÓN Esto no puede ser verdad.</td>\n",
              "      <td>2021-06-16 12:35:00+00:00</td>\n",
              "      <td>mmaaleena</td>\n",
              "      <td>2021-06-16 12:32:30.795555</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>102</th>\n",
              "      <td>1405111660323426305</td>\n",
              "      <td>enñace</td>\n",
              "      <td>2021-06-16 12:35:00+00:00</td>\n",
              "      <td>MMnendzDz</td>\n",
              "      <td>2021-06-16 12:32:30.795555</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>103 rows × 5 columns</p>\n",
              "</div>"
            ],
            "text/plain": [
              "                      ID  ...                   Run time\n",
              "0    1405111160731545602  ... 2021-06-16 12:32:30.795555\n",
              "1    1405111168046338049  ... 2021-06-16 12:32:30.795555\n",
              "2    1405111172177801220  ... 2021-06-16 12:32:30.795555\n",
              "3    1405111178423058433  ... 2021-06-16 12:32:30.795555\n",
              "4    1405111179056496644  ... 2021-06-16 12:32:30.795555\n",
              "..                   ...  ...                        ...\n",
              "98   1405111649695145990  ... 2021-06-16 12:32:30.795555\n",
              "99   1405111655504228354  ... 2021-06-16 12:32:30.795555\n",
              "100  1405111659505586178  ... 2021-06-16 12:32:30.795555\n",
              "101  1405111661300699142  ... 2021-06-16 12:32:30.795555\n",
              "102  1405111660323426305  ... 2021-06-16 12:32:30.795555\n",
              "\n",
              "[103 rows x 5 columns]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 26
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "ePurCW0At5Yj"
      },
      "source": [
        "# Save df Tweets in streaming to csv \n",
        "df.to_csv(r'/content/tweets_stream.csv', index = False) "
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "b1N9SNe1uIor"
      },
      "source": [
        "# 2 ) LOAD TWEETS AND APPLY THE MODEL\n",
        "\n",
        "\n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "HdlLqOVguk1D"
      },
      "source": [
        "!pip install -q datasets\n",
        "!pip install -q transformers"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "KKDF5gZ8uoID"
      },
      "source": [
        "from datasets import load_dataset\n",
        "from transformers import AutoModelForSequenceClassification\n",
        "from transformers import AutoTokenizer\n",
        "from datasets import Dataset\n"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "slTANpkJvJUo",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "a747ae80-e5de-49aa-aa8e-cc5f81803d79"
      },
      "source": [
        "from google.colab import drive\n",
        "import os \n",
        "\n",
        "drive.mount('/content/drive') # to connect to our drive"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Drive already mounted at /content/drive; to attempt to forcibly remount, call drive.mount(\"/content/drive\", force_remount=True).\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 286
        },
        "id": "G6Q9yExvOmtk",
        "outputId": "2dae45d3-ae39-4ced-c131-a6baf33eddf5"
      },
      "source": [
        "df = pd.read_csv('/content/tweets_stream.csv')\n",
        "df.head()"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>ID</th>\n",
              "      <th>Text</th>\n",
              "      <th>Created time</th>\n",
              "      <th>Screen name</th>\n",
              "      <th>Run time</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>1405101850387521539</td>\n",
              "      <td>MENCIÓN Me temo que de la Kitchen nos estamos ...</td>\n",
              "      <td>2021-06-16 11:56:01+00:00</td>\n",
              "      <td>RaulGuzzoConteG</td>\n",
              "      <td>2021-06-16 11:55:44.050461</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>1405101856192401413</td>\n",
              "      <td>MENCIÓN MENCIÓN JAJAJAJAJAJA</td>\n",
              "      <td>2021-06-16 11:56:02+00:00</td>\n",
              "      <td>paumolla02</td>\n",
              "      <td>2021-06-16 11:55:44.050461</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>1405101876744425474</td>\n",
              "      <td>@1777_1815_1865 MENCIÓN MENCIÓN Ce n est pas l...</td>\n",
              "      <td>2021-06-16 11:56:07+00:00</td>\n",
              "      <td>pesiss</td>\n",
              "      <td>2021-06-16 11:55:44.050461</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>1405101878057259009</td>\n",
              "      <td>MENCIÓN MENCIÓN Siiii en mi corazón temalomejo...</td>\n",
              "      <td>2021-06-16 11:56:07+00:00</td>\n",
              "      <td>GemaBallestero5</td>\n",
              "      <td>2021-06-16 11:55:44.050461</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>1405101880376705026</td>\n",
              "      <td>Es amiguito de quién le paga más.</td>\n",
              "      <td>2021-06-16 11:56:08+00:00</td>\n",
              "      <td>margaser1</td>\n",
              "      <td>2021-06-16 11:55:44.050461</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "                    ID  ...                    Run time\n",
              "0  1405101850387521539  ...  2021-06-16 11:55:44.050461\n",
              "1  1405101856192401413  ...  2021-06-16 11:55:44.050461\n",
              "2  1405101876744425474  ...  2021-06-16 11:55:44.050461\n",
              "3  1405101878057259009  ...  2021-06-16 11:55:44.050461\n",
              "4  1405101880376705026  ...  2021-06-16 11:55:44.050461\n",
              "\n",
              "[5 rows x 5 columns]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 9
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "tfExjxkpZEOW",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "60b4b703-e03b-4ea8-8c73-be2fe07b9189"
      },
      "source": [
        "column_names = list(df.columns)\n",
        "print(column_names) "
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "['ID', 'Text', 'Created time', 'Screen name', 'Run time']\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "OUj14FavZUf-",
        "outputId": "9d90f0b9-2429-4386-8b86-8f829461d580"
      },
      "source": [
        "# Load the csv as Dataset instead of DataFrame. We need this type of dataset to use the module Transformers\n",
        "\n",
        "data = load_dataset('csv', data_files ='/content/tweets_stream.csv', column_names = column_names, skiprows = 1)\n",
        "data_train = data['train']"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Using custom data configuration default-346d498a2d0dd801\n",
            "Reusing dataset csv (/root/.cache/huggingface/datasets/csv/default-346d498a2d0dd801/0.0.0/2dc6629a9ff6b5697d82c25b73731dd440507a69cbce8b425db50b751e8fcfd0)\n"
          ],
          "name": "stderr"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "VIXp4WvXayJz",
        "outputId": "7468dc70-3d89-4f73-b91c-ed617e2ba466"
      },
      "source": [
        "data_train"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Dataset({\n",
              "    features: ['ID', 'Text', 'Created time', 'Screen name', 'Run time'],\n",
              "    num_rows: 104\n",
              "})"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 12
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 35
        },
        "id": "5gPMYtr0D6VK",
        "outputId": "2c903e3c-7d2f-4ddd-af2c-66a3b54e6f42"
      },
      "source": [
        "# If you are not sure where is your model, you can look for it using de module os\n",
        "\n",
        "# os.chdir('/content/drive/My Drive/HATEBLOCKERS/distill_bnaice_model')\n",
        "# os.getcwd()\n",
        "# !pwd\n"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "string"
            },
            "text/plain": [
              "'/content'"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 13
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Nh_9824F3wXl",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "09948561-6d7c-4a20-cfc5-921f84017338"
      },
      "source": [
        "# Import the model\n",
        "\n",
        "for dirname, _, filenames in os.walk('/content/drive/MyDrive/HATEBLOCKERS'):\n",
        "    for filename in filenames:\n",
        "        print(\"Directory path: \", os.path.join(dirname, filename))\n",
        "        print(\"Folder name: \", dirname)\n",
        "        print(\"File name: \", filename)\n",
        "\n",
        "model = AutoModelForSequenceClassification.from_pretrained('/content/drive/My Drive/HATEBLOCKERS/distill_bnaice_model')\n",
        "\n",
        "# model = AutoModelForSequenceClassification.from_pretrained('/content/drive/My Drive/ the folfer where is your model ')"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Directory path:  /content/drive/MyDrive/HATEBLOCKERS/twitter-sentiment-extaction-analysis-eda-and-model.ipynb\n",
            "Folder name:  /content/drive/MyDrive/HATEBLOCKERS\n",
            "File name:  twitter-sentiment-extaction-analysis-eda-and-model.ipynb\n",
            "Directory path:  /content/drive/MyDrive/HATEBLOCKERS/Twitter Sentiment Extaction - Analysis, EDA and Model.ipynb\n",
            "Folder name:  /content/drive/MyDrive/HATEBLOCKERS\n",
            "File name:  Twitter Sentiment Extaction - Analysis, EDA and Model.ipynb\n",
            "Directory path:  /content/drive/MyDrive/HATEBLOCKERS/TEMA 1_ INTRODUCCIÓN ML.pdf\n",
            "Folder name:  /content/drive/MyDrive/HATEBLOCKERS\n",
            "File name:  TEMA 1_ INTRODUCCIÓN ML.pdf\n",
            "Directory path:  /content/drive/MyDrive/HATEBLOCKERS/Curso Neural Network y Deep LEARNING.pdf\n",
            "Folder name:  /content/drive/MyDrive/HATEBLOCKERS\n",
            "File name:  Curso Neural Network y Deep LEARNING.pdf\n",
            "Directory path:  /content/drive/MyDrive/HATEBLOCKERS/DATABASE_KAGGLE.ipynb\n",
            "Folder name:  /content/drive/MyDrive/HATEBLOCKERS\n",
            "File name:  DATABASE_KAGGLE.ipynb\n",
            "Directory path:  /content/drive/MyDrive/HATEBLOCKERS/kaggle/input/training.1600000.processed.noemoticon.csv\n",
            "Folder name:  /content/drive/MyDrive/HATEBLOCKERS/kaggle/input\n",
            "File name:  training.1600000.processed.noemoticon.csv\n",
            "Directory path:  /content/drive/MyDrive/HATEBLOCKERS/distill_bnaice_model/pytorch_model.bin\n",
            "Folder name:  /content/drive/MyDrive/HATEBLOCKERS/distill_bnaice_model\n",
            "File name:  pytorch_model.bin\n",
            "Directory path:  /content/drive/MyDrive/HATEBLOCKERS/distill_bnaice_model/config.json\n",
            "Folder name:  /content/drive/MyDrive/HATEBLOCKERS/distill_bnaice_model\n",
            "File name:  config.json\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "JdQRaSMtwH4N"
      },
      "source": [
        "## 2.1) New tweets\n",
        "\n",
        "\n",
        "1.   Tokenization\n",
        "2.   Cleaning\n",
        "3.   Activation Function: Softmax\n",
        "4.   Apply Model\n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "jOZf3-SwEuoA"
      },
      "source": [
        "# Select the tokenizer \n",
        "\n",
        "tokenizer = AutoTokenizer.from_pretrained(\"dccuchile/bert-base-spanish-wwm-uncased\")"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "1sYRHHGQP-2S",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "efc07651-4b04-41e5-f052-06a84b1ee75e"
      },
      "source": [
        "# Clean the tweets\n",
        "\n",
        "def clean_text(example):\n",
        "\n",
        "  def cleaning_function(text):\n",
        "    text_processed = text\n",
        "    text_processed = re.sub('https:\\/\\/t\\.co\\/[a-zA-Z0-9]+','ENLACE',text_processed)\n",
        "    text_processed = re.sub('@(\\w){1,15}','usuario', text_processed)\n",
        "    text_processed = re.sub('#[a-zA-Z0-9]+','tema ', text_processed)\n",
        "    text_processed = re.sub(r\"http\\S+\",'',text_processed) #Removing hyperlinks\n",
        "    text_processed = re.sub(r'RT[\\s]+','',text_processed) #Removing the 'RT' word\n",
        "    text_processed = re.sub(r'(?<=^|(?<=[^a-zA-Z0-9-_\\.]))@([A-Za-z]+[A-Za-z0-9-_]+)', 'MENCION',text_processed) # Removing @mentions\n",
        "    text_processed = re.sub(r'#','',text_processed) # Removing the '#' symbol\n",
        "    text_processed = re.sub(r':\\)','',text_processed) # Removing the ':)'\n",
        "    text_processed = re.sub(r':-\\)','',text_processed) # Removing the ':-)'\n",
        "    text_processed = re.sub(r':\\(','',text_processed) # Removing the ':('\n",
        "    text_processed = re.sub(r':-\\(','',text_processed) # Removing the ':-('\n",
        "    text_processed = re.sub(r':','',text_processed) # Removing the ':' symbol\n",
        "    pattern = re.compile(pattern = \"[\"\n",
        "        u\"\\U0001F600-\\U0001F64F\"  # emoticons\n",
        "        u\"\\U0001F300-\\U0001F5FF\"  # symbols & pictographs\n",
        "        u\"\\U0001F680-\\U0001F6FF\"  # transport & map symbols\n",
        "        u\"\\U0001F1E0-\\U0001F1FF\"  # flags (iOS)\n",
        "                           \"]+\", flags = re.UNICODE)\n",
        "    text_processed = pattern.sub(r'EMOJI',text_processed)\n",
        "    return text_processed\n",
        "  \n",
        "  texts_cleaned = []\n",
        "  for text in example['Text']:\n",
        "    texts_cleaned.append(cleaning_function(text))\n",
        "  return {'Text':texts_cleaned}\n",
        "\n",
        "\n",
        "data_train = data_train.map(clean_text, batched=True)\n",
        "data = data.map(clean_text, batched=True)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Loading cached processed dataset at /root/.cache/huggingface/datasets/csv/default-346d498a2d0dd801/0.0.0/2dc6629a9ff6b5697d82c25b73731dd440507a69cbce8b425db50b751e8fcfd0/cache-25c2c09dbfaae790.arrow\n",
            "Loading cached processed dataset at /root/.cache/huggingface/datasets/csv/default-346d498a2d0dd801/0.0.0/2dc6629a9ff6b5697d82c25b73731dd440507a69cbce8b425db50b751e8fcfd0/cache-25c2c09dbfaae790.arrow\n"
          ],
          "name": "stderr"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "bM9hcKQxP-4q",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 65,
          "referenced_widgets": [
            "0aedd85ea04d4e5db55aaf27553a2917",
            "55aae95f962a4a86b15ab6cf5fc4cf08",
            "6739bb4495f6470188912d3df984e38b",
            "4b2ae3905af94da8a65cb3f306d71e1f",
            "166628b0d75d4248bae9f0bc897496f9",
            "cbb90ac05d70446d94a9d1405c491814",
            "1c2c357dfddb4b879e8bc60e3735f012",
            "376f2648f48243ba8dc1ba8bb6b08ddd"
          ]
        },
        "outputId": "0eaa1f5e-6f38-4a55-e73a-470d16bbed07"
      },
      "source": [
        "def tokenize_function(examples):\n",
        "    return tokenizer(examples[\"Text\"], padding=\"max_length\", truncation=True)\n",
        "\n",
        "data_train = Dataset.from_dict(data_train[:])\n",
        "tokenized_datasets = data_train.map(tokenize_function, batched=True)\n",
        "\n",
        "\n",
        "# In case there is too much data, try with a subsample of the dataset \n",
        "\n",
        "#subsample = 2000\n",
        "#data_train = Dataset.from_dict(data_train[:subsample])\n"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "application/vnd.jupyter.widget-view+json": {
              "model_id": "0aedd85ea04d4e5db55aaf27553a2917",
              "version_minor": 0,
              "version_major": 2
            },
            "text/plain": [
              "HBox(children=(FloatProgress(value=0.0, max=1.0), HTML(value='')))"
            ]
          },
          "metadata": {
            "tags": []
          }
        },
        {
          "output_type": "stream",
          "text": [
            "\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "x4saBPWntrrR",
        "outputId": "a26c4158-c945-41d8-8ed6-7d3c297399b3"
      },
      "source": [
        "tokenized_datasets"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Dataset({\n",
              "    features: ['Created time', 'ID', 'Run time', 'Screen name', 'Text', 'attention_mask', 'input_ids', 'token_type_ids'],\n",
              "    num_rows: 104\n",
              "})"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 17
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "zPSZPV_9_YWa"
      },
      "source": [
        "def softmax(x):\n",
        "  return np.exp(x)/sum(np.exp(x))\n",
        "\n",
        "def apply_model(x):\n",
        "  inputs = tokenizer(x, return_tensors=\"pt\") \n",
        "  outputs = model(**inputs)\n",
        "  return (softmax(outputs.logits.detach().numpy()[0])[1])*2 -1 # df['sentimiento'] is between -1 and 1 ([-1, 1])\n",
        "\n",
        "textos_limpios = data['train']['Text']\n",
        "sentimiento = [apply_model(text) for text in textos_limpios]\n",
        "df['sentimiento'] = sentimiento"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 286
        },
        "id": "XojxI-TeF15_",
        "outputId": "bd86f98d-66c2-4005-af37-3965b750956f"
      },
      "source": [
        "df.head()"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>ID</th>\n",
              "      <th>Text</th>\n",
              "      <th>Created time</th>\n",
              "      <th>Screen name</th>\n",
              "      <th>Run time</th>\n",
              "      <th>sentimiento</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>1405101850387521539</td>\n",
              "      <td>MENCIÓN Me temo que de la Kitchen nos estamos ...</td>\n",
              "      <td>2021-06-16 11:56:01+00:00</td>\n",
              "      <td>RaulGuzzoConteG</td>\n",
              "      <td>2021-06-16 11:55:44.050461</td>\n",
              "      <td>-0.816334</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>1405101856192401413</td>\n",
              "      <td>MENCIÓN MENCIÓN JAJAJAJAJAJA</td>\n",
              "      <td>2021-06-16 11:56:02+00:00</td>\n",
              "      <td>paumolla02</td>\n",
              "      <td>2021-06-16 11:55:44.050461</td>\n",
              "      <td>-0.829416</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>1405101876744425474</td>\n",
              "      <td>@1777_1815_1865 MENCIÓN MENCIÓN Ce n est pas l...</td>\n",
              "      <td>2021-06-16 11:56:07+00:00</td>\n",
              "      <td>pesiss</td>\n",
              "      <td>2021-06-16 11:55:44.050461</td>\n",
              "      <td>-0.718711</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>1405101878057259009</td>\n",
              "      <td>MENCIÓN MENCIÓN Siiii en mi corazón temalomejo...</td>\n",
              "      <td>2021-06-16 11:56:07+00:00</td>\n",
              "      <td>GemaBallestero5</td>\n",
              "      <td>2021-06-16 11:55:44.050461</td>\n",
              "      <td>-0.840319</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>1405101880376705026</td>\n",
              "      <td>Es amiguito de quién le paga más.</td>\n",
              "      <td>2021-06-16 11:56:08+00:00</td>\n",
              "      <td>margaser1</td>\n",
              "      <td>2021-06-16 11:55:44.050461</td>\n",
              "      <td>-0.595210</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "                    ID  ... sentimiento\n",
              "0  1405101850387521539  ...   -0.816334\n",
              "1  1405101856192401413  ...   -0.829416\n",
              "2  1405101876744425474  ...   -0.718711\n",
              "3  1405101878057259009  ...   -0.840319\n",
              "4  1405101880376705026  ...   -0.595210\n",
              "\n",
              "[5 rows x 6 columns]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 19
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "QxA8XDCRF-hD"
      },
      "source": [
        "# Save the classification\n",
        "df.to_csv(r'/content/tweets_stream_classification.csv', index = False) "
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "KAqZf66I1rWt"
      },
      "source": [
        "# 3 ) ANALYSIS"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "TtmLI0My49xd"
      },
      "source": [
        "from wordcloud import WordCloud\n",
        "import matplotlib.pyplot as plt\n",
        "import seaborn as sns\n",
        "from plotly import graph_objs as go\n",
        "from collections import Counter\n",
        "import plotly.graph_objects as go\n",
        "import nltk\n",
        "nltk.download('stopwords')\n",
        "from nltk.corpus import stopwords"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 986
        },
        "id": "M-KeRa1KHBfq",
        "outputId": "b11c4955-2841-4005-c1e1-eebdd46c29f3"
      },
      "source": [
        "# If you have another df\n",
        "df = pd.read_csv('/content/tweets_stream_classification.csv')\n",
        "df.head(30)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>ID</th>\n",
              "      <th>Text</th>\n",
              "      <th>Created time</th>\n",
              "      <th>Screen name</th>\n",
              "      <th>Run time</th>\n",
              "      <th>sentimiento</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>1405101850387521539</td>\n",
              "      <td>MENCIÓN Me temo que de la Kitchen nos estamos ...</td>\n",
              "      <td>2021-06-16 11:56:01+00:00</td>\n",
              "      <td>RaulGuzzoConteG</td>\n",
              "      <td>2021-06-16 11:55:44.050461</td>\n",
              "      <td>-0.816334</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>1405101856192401413</td>\n",
              "      <td>MENCIÓN MENCIÓN JAJAJAJAJAJA</td>\n",
              "      <td>2021-06-16 11:56:02+00:00</td>\n",
              "      <td>paumolla02</td>\n",
              "      <td>2021-06-16 11:55:44.050461</td>\n",
              "      <td>-0.829416</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>1405101876744425474</td>\n",
              "      <td>@1777_1815_1865 MENCIÓN MENCIÓN Ce n est pas l...</td>\n",
              "      <td>2021-06-16 11:56:07+00:00</td>\n",
              "      <td>pesiss</td>\n",
              "      <td>2021-06-16 11:55:44.050461</td>\n",
              "      <td>-0.718711</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>1405101878057259009</td>\n",
              "      <td>MENCIÓN MENCIÓN Siiii en mi corazón temalomejo...</td>\n",
              "      <td>2021-06-16 11:56:07+00:00</td>\n",
              "      <td>GemaBallestero5</td>\n",
              "      <td>2021-06-16 11:55:44.050461</td>\n",
              "      <td>-0.840319</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>1405101880376705026</td>\n",
              "      <td>Es amiguito de quién le paga más.</td>\n",
              "      <td>2021-06-16 11:56:08+00:00</td>\n",
              "      <td>margaser1</td>\n",
              "      <td>2021-06-16 11:55:44.050461</td>\n",
              "      <td>-0.595210</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>1405101883203653633</td>\n",
              "      <td>MENCIÓN NAY</td>\n",
              "      <td>2021-06-16 11:56:09+00:00</td>\n",
              "      <td>DoloresRino</td>\n",
              "      <td>2021-06-16 11:55:44.050461</td>\n",
              "      <td>-0.888475</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6</th>\n",
              "      <td>1405101894729617412</td>\n",
              "      <td>MENCIÓN temaKeremBürsın</td>\n",
              "      <td>2021-06-16 11:56:11+00:00</td>\n",
              "      <td>MaraJos92398348</td>\n",
              "      <td>2021-06-16 11:55:44.050461</td>\n",
              "      <td>-0.851707</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7</th>\n",
              "      <td>1405101896684163073</td>\n",
              "      <td>Went to 4 finals, won 2, grinded out 10 games ...</td>\n",
              "      <td>2021-06-16 11:56:12+00:00</td>\n",
              "      <td>Brandon_Davies0</td>\n",
              "      <td>2021-06-16 11:55:44.050461</td>\n",
              "      <td>-0.399179</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>8</th>\n",
              "      <td>1405101903948750856</td>\n",
              "      <td>Derecho a la vivienda digna y derecho a la inv...</td>\n",
              "      <td>2021-06-16 11:56:14+00:00</td>\n",
              "      <td>CantavellaMaaar</td>\n",
              "      <td>2021-06-16 11:55:44.050461</td>\n",
              "      <td>0.014753</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9</th>\n",
              "      <td>1405101911938932736</td>\n",
              "      <td>MENCIÓN MENOS QUE BIONIC enñace</td>\n",
              "      <td>2021-06-16 11:56:15+00:00</td>\n",
              "      <td>ZeusLaand</td>\n",
              "      <td>2021-06-16 11:55:44.050461</td>\n",
              "      <td>-0.795763</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>10</th>\n",
              "      <td>1405101913956290562</td>\n",
              "      <td>MENCIÓN MENCIÓN Totalmente.</td>\n",
              "      <td>2021-06-16 11:56:16+00:00</td>\n",
              "      <td>Andor84</td>\n",
              "      <td>2021-06-16 11:55:44.050461</td>\n",
              "      <td>-0.734470</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>11</th>\n",
              "      <td>1405101925025132546</td>\n",
              "      <td>MENCIÓN MENCIÓN MENCIÓN Prepárate para ser la ...</td>\n",
              "      <td>2021-06-16 11:56:19+00:00</td>\n",
              "      <td>Rafafakari</td>\n",
              "      <td>2021-06-16 11:55:44.050461</td>\n",
              "      <td>-0.661678</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>12</th>\n",
              "      <td>1405101930582528001</td>\n",
              "      <td>Le boycott des produits français et émiratis e...</td>\n",
              "      <td>2021-06-16 11:56:20+00:00</td>\n",
              "      <td>illusioniste16</td>\n",
              "      <td>2021-06-16 11:55:44.050461</td>\n",
              "      <td>-0.591079</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>13</th>\n",
              "      <td>1405101934223282178</td>\n",
              "      <td>MENCIÓN No es verdad, seguro!</td>\n",
              "      <td>2021-06-16 11:56:21+00:00</td>\n",
              "      <td>JosepSola_TRS</td>\n",
              "      <td>2021-06-16 11:55:44.050461</td>\n",
              "      <td>-0.784642</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>14</th>\n",
              "      <td>1405101934361649159</td>\n",
              "      <td>López Miras asegura que “la oposición digna, r...</td>\n",
              "      <td>2021-06-16 11:56:21+00:00</td>\n",
              "      <td>AguilasRadio</td>\n",
              "      <td>2021-06-16 11:55:44.050461</td>\n",
              "      <td>-0.506502</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>15</th>\n",
              "      <td>1405101940200161283</td>\n",
              "      <td>MENCIÓN MENCIÓN MENCIÓN Y si te vas al canal d...</td>\n",
              "      <td>2021-06-16 11:56:22+00:00</td>\n",
              "      <td>MarcosGinel</td>\n",
              "      <td>2021-06-16 11:55:44.050461</td>\n",
              "      <td>-0.750547</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>16</th>\n",
              "      <td>1405101942351831040</td>\n",
              "      <td>Happy Wednesday guys  enñace NEW content comin...</td>\n",
              "      <td>2021-06-16 11:56:23+00:00</td>\n",
              "      <td>AlantaRose</td>\n",
              "      <td>2021-06-16 11:55:44.050461</td>\n",
              "      <td>-0.195129</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>17</th>\n",
              "      <td>1405101945791172608</td>\n",
              "      <td>MENCIÓN literalmente quien hace eso es subnormal</td>\n",
              "      <td>2021-06-16 11:56:24+00:00</td>\n",
              "      <td>SergioVallle</td>\n",
              "      <td>2021-06-16 11:55:44.050461</td>\n",
              "      <td>-0.810230</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>18</th>\n",
              "      <td>1405101947447820290</td>\n",
              "      <td>when you message ate MENCIÓN tapos sunod2x ire...</td>\n",
              "      <td>2021-06-16 11:56:24+00:00</td>\n",
              "      <td>marypatris</td>\n",
              "      <td>2021-06-16 11:55:44.050461</td>\n",
              "      <td>-0.745767</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>19</th>\n",
              "      <td>1405101966045372418</td>\n",
              "      <td>MENCIÓN MENCIÓN Ellas y los Vencejos una narav...</td>\n",
              "      <td>2021-06-16 11:56:28+00:00</td>\n",
              "      <td>FerndezJose</td>\n",
              "      <td>2021-06-16 11:55:44.050461</td>\n",
              "      <td>-0.757245</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>20</th>\n",
              "      <td>1405101966020259840</td>\n",
              "      <td>MENCIÓN MENCIÓN Exacto. Hay que ganar con lo q...</td>\n",
              "      <td>2021-06-16 11:56:28+00:00</td>\n",
              "      <td>MiguelServera</td>\n",
              "      <td>2021-06-16 11:55:44.050461</td>\n",
              "      <td>-0.497607</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>21</th>\n",
              "      <td>1405101967437873153</td>\n",
              "      <td>MENCIÓN  Imagina que tuvieras 29 segundos y en...</td>\n",
              "      <td>2021-06-16 11:56:29+00:00</td>\n",
              "      <td>RufKalle</td>\n",
              "      <td>2021-06-16 11:55:44.050461</td>\n",
              "      <td>-0.703639</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>22</th>\n",
              "      <td>1405101971359555584</td>\n",
              "      <td>MENCIÓN MENCIÓN Me representa TODO. 4 alarmas ...</td>\n",
              "      <td>2021-06-16 11:56:30+00:00</td>\n",
              "      <td>SoositaX</td>\n",
              "      <td>2021-06-16 11:55:44.050461</td>\n",
              "      <td>-0.594967</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>23</th>\n",
              "      <td>1405101976317317122</td>\n",
              "      <td>Y X SUPUESTO las risas   d VINI JR...,    enñace</td>\n",
              "      <td>2021-06-16 11:56:31+00:00</td>\n",
              "      <td>manolocbis77</td>\n",
              "      <td>2021-06-16 11:55:44.050461</td>\n",
              "      <td>-0.108420</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>24</th>\n",
              "      <td>1405101982768058369</td>\n",
              "      <td>MENCIÓN Alto y claro.</td>\n",
              "      <td>2021-06-16 11:56:32+00:00</td>\n",
              "      <td>espolista</td>\n",
              "      <td>2021-06-16 11:55:44.050461</td>\n",
              "      <td>-0.766769</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>25</th>\n",
              "      <td>1405102005832536068</td>\n",
              "      <td>MENCIÓN MENCIÓN MENCIÓN MENCIÓN La verdad que ...</td>\n",
              "      <td>2021-06-16 11:56:38+00:00</td>\n",
              "      <td>ViigoR6</td>\n",
              "      <td>2021-06-16 11:55:44.050461</td>\n",
              "      <td>-0.823925</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>26</th>\n",
              "      <td>1405102013877215234</td>\n",
              "      <td>Me toca eixir a passejar per la Santa Faç a vo...</td>\n",
              "      <td>2021-06-16 11:56:40+00:00</td>\n",
              "      <td>pferrerpastor</td>\n",
              "      <td>2021-06-16 11:55:44.050461</td>\n",
              "      <td>-0.196636</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>27</th>\n",
              "      <td>1405102013998944257</td>\n",
              "      <td>Menú diario y medio menú hasta la noche en la ...</td>\n",
              "      <td>2021-06-16 11:56:40+00:00</td>\n",
              "      <td>HotelEuropamad</td>\n",
              "      <td>2021-06-16 11:55:44.050461</td>\n",
              "      <td>-0.686966</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>28</th>\n",
              "      <td>1405102014602809350</td>\n",
              "      <td>Acaba de publicar una foto en La Cuna De La Fi...</td>\n",
              "      <td>2021-06-16 11:56:40+00:00</td>\n",
              "      <td>QueraltRuiz</td>\n",
              "      <td>2021-06-16 11:55:44.050461</td>\n",
              "      <td>-0.327007</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>29</th>\n",
              "      <td>1405102015609556999</td>\n",
              "      <td>Y este MENCIÓN tiene la poca vergüenza de deci...</td>\n",
              "      <td>2021-06-16 11:56:40+00:00</td>\n",
              "      <td>Grau_JC</td>\n",
              "      <td>2021-06-16 11:55:44.050461</td>\n",
              "      <td>-0.479923</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "                     ID  ... sentimiento\n",
              "0   1405101850387521539  ...   -0.816334\n",
              "1   1405101856192401413  ...   -0.829416\n",
              "2   1405101876744425474  ...   -0.718711\n",
              "3   1405101878057259009  ...   -0.840319\n",
              "4   1405101880376705026  ...   -0.595210\n",
              "5   1405101883203653633  ...   -0.888475\n",
              "6   1405101894729617412  ...   -0.851707\n",
              "7   1405101896684163073  ...   -0.399179\n",
              "8   1405101903948750856  ...    0.014753\n",
              "9   1405101911938932736  ...   -0.795763\n",
              "10  1405101913956290562  ...   -0.734470\n",
              "11  1405101925025132546  ...   -0.661678\n",
              "12  1405101930582528001  ...   -0.591079\n",
              "13  1405101934223282178  ...   -0.784642\n",
              "14  1405101934361649159  ...   -0.506502\n",
              "15  1405101940200161283  ...   -0.750547\n",
              "16  1405101942351831040  ...   -0.195129\n",
              "17  1405101945791172608  ...   -0.810230\n",
              "18  1405101947447820290  ...   -0.745767\n",
              "19  1405101966045372418  ...   -0.757245\n",
              "20  1405101966020259840  ...   -0.497607\n",
              "21  1405101967437873153  ...   -0.703639\n",
              "22  1405101971359555584  ...   -0.594967\n",
              "23  1405101976317317122  ...   -0.108420\n",
              "24  1405101982768058369  ...   -0.766769\n",
              "25  1405102005832536068  ...   -0.823925\n",
              "26  1405102013877215234  ...   -0.196636\n",
              "27  1405102013998944257  ...   -0.686966\n",
              "28  1405102014602809350  ...   -0.327007\n",
              "29  1405102015609556999  ...   -0.479923\n",
              "\n",
              "[30 rows x 6 columns]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 47
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "cuClyzBlV_c3",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 292
        },
        "outputId": "78596481-6c8b-411a-c070-5a5ce6e3de84"
      },
      "source": [
        "df['Text'] = df[\"Text\"].str.lower()\n",
        "df.head()"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>ID</th>\n",
              "      <th>Text</th>\n",
              "      <th>Created time</th>\n",
              "      <th>Screen name</th>\n",
              "      <th>Run time</th>\n",
              "      <th>sentimiento</th>\n",
              "      <th>Text_without_stopwords</th>\n",
              "      <th>target</th>\n",
              "      <th>temp_list</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>1405101850387521539</td>\n",
              "      <td>mención me temo que de la kitchen nos estamos ...</td>\n",
              "      <td>2021-06-16 11:56:01+00:00</td>\n",
              "      <td>RaulGuzzoConteG</td>\n",
              "      <td>2021-06-16 11:55:44.050461</td>\n",
              "      <td>-0.816334</td>\n",
              "      <td>Me temo Kitchen enterando 0.3%.</td>\n",
              "      <td>Negative</td>\n",
              "      <td>[Me, temo, Kitchen, enterando, 0.3%.]</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>1405101856192401413</td>\n",
              "      <td>mención mención jajajajajaja</td>\n",
              "      <td>2021-06-16 11:56:02+00:00</td>\n",
              "      <td>paumolla02</td>\n",
              "      <td>2021-06-16 11:55:44.050461</td>\n",
              "      <td>-0.829416</td>\n",
              "      <td>JAJAJAJAJAJA</td>\n",
              "      <td>Negative</td>\n",
              "      <td>[JAJAJAJAJAJA]</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>1405101876744425474</td>\n",
              "      <td>@1777_1815_1865 mención mención ce n est pas l...</td>\n",
              "      <td>2021-06-16 11:56:07+00:00</td>\n",
              "      <td>pesiss</td>\n",
              "      <td>2021-06-16 11:55:44.050461</td>\n",
              "      <td>-0.718711</td>\n",
              "      <td>@1777_1815_1865 Ce question, dire chaque fois ...</td>\n",
              "      <td>Negative</td>\n",
              "      <td>[@1777_1815_1865, Ce, question,, dire, chaque,...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>1405101878057259009</td>\n",
              "      <td>mención mención siiii en mi corazón temalomejo...</td>\n",
              "      <td>2021-06-16 11:56:07+00:00</td>\n",
              "      <td>GemaBallestero5</td>\n",
              "      <td>2021-06-16 11:55:44.050461</td>\n",
              "      <td>-0.840319</td>\n",
              "      <td>Siiii corazón temalomejordenuestramúsica</td>\n",
              "      <td>Negative</td>\n",
              "      <td>[Siiii, corazón, temalomejordenuestramúsica]</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>1405101880376705026</td>\n",
              "      <td>es amiguito de quién le paga más.</td>\n",
              "      <td>2021-06-16 11:56:08+00:00</td>\n",
              "      <td>margaser1</td>\n",
              "      <td>2021-06-16 11:55:44.050461</td>\n",
              "      <td>-0.595210</td>\n",
              "      <td>Es amiguito quién paga más.</td>\n",
              "      <td>Negative</td>\n",
              "      <td>[Es, amiguito, quién, paga, más.]</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "                    ID  ...                                          temp_list\n",
              "0  1405101850387521539  ...              [Me, temo, Kitchen, enterando, 0.3%.]\n",
              "1  1405101856192401413  ...                                     [JAJAJAJAJAJA]\n",
              "2  1405101876744425474  ...  [@1777_1815_1865, Ce, question,, dire, chaque,...\n",
              "3  1405101878057259009  ...       [Siiii, corazón, temalomejordenuestramúsica]\n",
              "4  1405101880376705026  ...                  [Es, amiguito, quién, paga, más.]\n",
              "\n",
              "[5 rows x 9 columns]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 89
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "SitO8JtSR11r"
      },
      "source": [
        "# Import stopwords with nltk.\n",
        "from nltk.corpus import stopwords\n",
        "stop = nltk.corpus.stopwords.words(['english','spanish','italian','dutch','french'])\n",
        "\n",
        "new_words = ['MENCIÓN','MENCION', 'ENLACE', 'EMOJI', 'enlace', '@','_','%', 'enñace', 'mencion', 'mención'] # We don't want these words to appear in the WordCloud either\n",
        "for i in new_words:\n",
        "    stop.append(i)\n",
        "\n",
        "# Exclude stopwords with Python's list comprehension and pandas.DataFrame.apply.\n",
        "df['Text_without_stopwords'] = df['Text'].apply(lambda x: ' '.join([word for word in x.split() if word not in (stop)]))"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 292
        },
        "id": "DbpzCP_5ysCF",
        "outputId": "076035e8-c93a-4b83-d25f-156c5f1758e5"
      },
      "source": [
        "df.head()"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>ID</th>\n",
              "      <th>Text</th>\n",
              "      <th>Created time</th>\n",
              "      <th>Screen name</th>\n",
              "      <th>Run time</th>\n",
              "      <th>sentimiento</th>\n",
              "      <th>Text_without_stopwords</th>\n",
              "      <th>target</th>\n",
              "      <th>temp_list</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>1405101850387521539</td>\n",
              "      <td>mención me temo que de la kitchen nos estamos ...</td>\n",
              "      <td>2021-06-16 11:56:01+00:00</td>\n",
              "      <td>RaulGuzzoConteG</td>\n",
              "      <td>2021-06-16 11:55:44.050461</td>\n",
              "      <td>-0.816334</td>\n",
              "      <td>temo kitchen enterando 0.3%.</td>\n",
              "      <td>Negative</td>\n",
              "      <td>[Me, temo, Kitchen, enterando, 0.3%.]</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>1405101856192401413</td>\n",
              "      <td>mención mención jajajajajaja</td>\n",
              "      <td>2021-06-16 11:56:02+00:00</td>\n",
              "      <td>paumolla02</td>\n",
              "      <td>2021-06-16 11:55:44.050461</td>\n",
              "      <td>-0.829416</td>\n",
              "      <td>jajajajajaja</td>\n",
              "      <td>Negative</td>\n",
              "      <td>[JAJAJAJAJAJA]</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>1405101876744425474</td>\n",
              "      <td>@1777_1815_1865 mención mención ce n est pas l...</td>\n",
              "      <td>2021-06-16 11:56:07+00:00</td>\n",
              "      <td>pesiss</td>\n",
              "      <td>2021-06-16 11:55:44.050461</td>\n",
              "      <td>-0.718711</td>\n",
              "      <td>@1777_1815_1865 question, dire chaque fois qu'...</td>\n",
              "      <td>Negative</td>\n",
              "      <td>[@1777_1815_1865, Ce, question,, dire, chaque,...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>1405101878057259009</td>\n",
              "      <td>mención mención siiii en mi corazón temalomejo...</td>\n",
              "      <td>2021-06-16 11:56:07+00:00</td>\n",
              "      <td>GemaBallestero5</td>\n",
              "      <td>2021-06-16 11:55:44.050461</td>\n",
              "      <td>-0.840319</td>\n",
              "      <td>siiii corazón temalomejordenuestramúsica</td>\n",
              "      <td>Negative</td>\n",
              "      <td>[Siiii, corazón, temalomejordenuestramúsica]</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>1405101880376705026</td>\n",
              "      <td>es amiguito de quién le paga más.</td>\n",
              "      <td>2021-06-16 11:56:08+00:00</td>\n",
              "      <td>margaser1</td>\n",
              "      <td>2021-06-16 11:55:44.050461</td>\n",
              "      <td>-0.595210</td>\n",
              "      <td>amiguito quién paga más.</td>\n",
              "      <td>Negative</td>\n",
              "      <td>[Es, amiguito, quién, paga, más.]</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "                    ID  ...                                          temp_list\n",
              "0  1405101850387521539  ...              [Me, temo, Kitchen, enterando, 0.3%.]\n",
              "1  1405101856192401413  ...                                     [JAJAJAJAJAJA]\n",
              "2  1405101876744425474  ...  [@1777_1815_1865, Ce, question,, dire, chaque,...\n",
              "3  1405101878057259009  ...       [Siiii, corazón, temalomejordenuestramúsica]\n",
              "4  1405101880376705026  ...                  [Es, amiguito, quién, paga, más.]\n",
              "\n",
              "[5 rows x 9 columns]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 93
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "m2FiQl4dA93v",
        "outputId": "1c9107ee-3278-4003-c718-cf809eb83729"
      },
      "source": [
        "df.info()"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "<class 'pandas.core.frame.DataFrame'>\n",
            "RangeIndex: 104 entries, 0 to 103\n",
            "Data columns (total 7 columns):\n",
            " #   Column                  Non-Null Count  Dtype  \n",
            "---  ------                  --------------  -----  \n",
            " 0   ID                      104 non-null    int64  \n",
            " 1   Text                    104 non-null    object \n",
            " 2   Created time            104 non-null    object \n",
            " 3   Screen name             104 non-null    object \n",
            " 4   Run time                104 non-null    object \n",
            " 5   sentimiento             104 non-null    float64\n",
            " 6   Text_without_stopwords  104 non-null    object \n",
            "dtypes: float64(1), int64(1), object(5)\n",
            "memory usage: 5.8+ KB\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "0Zytd4Yv2m4D",
        "outputId": "e21da25a-5760-4024-fd1d-10e0ea35ee18"
      },
      "source": [
        "df.shape"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(104, 7)"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 53
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 504
        },
        "id": "XHgOe83Qeabn",
        "outputId": "9a43da0c-90b7-474d-9232-88e22c61fc44"
      },
      "source": [
        "# Print an example and max/min values\n",
        "print(f\"The maximun value is: {df['sentimiento'].max()}\")\n",
        "print(f\"The minimum value is: {df['sentimiento'].min()}\")\n",
        "print(f\"Our values are between {df['sentimiento'].min()} and {df['sentimiento'].max()}\")\n",
        "\n",
        "print('\\n')\n",
        "print(f\"The Tweet <{df['Text'][0]} >, has obtained a score of {df['sentimiento'][0]}\")\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "WD = WordCloud(width = 9000, height = 3000,min_font_size = 10).generate(str(df['Text'][0]))\n",
        "fig = plt.figure(1, figsize=(14, 8))\n",
        "plt.axis('off')\n",
        "plt.imshow(WD)\n",
        "plt.show()"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "The maximun value is: 0.02076125144958496\n",
            "The minimum value is: -0.8884753957390785\n",
            "Our values are between -0.8884753957390785 and 0.02076125144958496\n",
            "\n",
            "\n",
            "The Tweet <MENCIÓN Me temo que de la Kitchen nos estamos enterando el 0.3%. >, has obtained a score of -0.8163343518972397\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "error",
          "ename": "KeyboardInterrupt",
          "evalue": "ignored",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mKeyboardInterrupt\u001b[0m                         Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-82-a2164f5568f6>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     10\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     11\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 12\u001b[0;31m \u001b[0mWD\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mWordCloud\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mwidth\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;36m9000\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mheight\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;36m3000\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mmin_font_size\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;36m10\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mgenerate\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mstr\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdf\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'Text'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     13\u001b[0m \u001b[0mfig\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfigure\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mfigsize\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m14\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m8\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     14\u001b[0m \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0maxis\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'off'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.7/dist-packages/wordcloud/wordcloud.py\u001b[0m in \u001b[0;36mgenerate\u001b[0;34m(self, text)\u001b[0m\n\u001b[1;32m    603\u001b[0m         \u001b[0mself\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    604\u001b[0m         \"\"\"\n\u001b[0;32m--> 605\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mgenerate_from_text\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtext\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    606\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    607\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m_check_generated\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.7/dist-packages/wordcloud/wordcloud.py\u001b[0m in \u001b[0;36mgenerate_from_text\u001b[0;34m(self, text)\u001b[0m\n\u001b[1;32m    585\u001b[0m         \"\"\"\n\u001b[1;32m    586\u001b[0m         \u001b[0mwords\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mprocess_text\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtext\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 587\u001b[0;31m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mgenerate_from_frequencies\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mwords\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    588\u001b[0m         \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    589\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.7/dist-packages/wordcloud/wordcloud.py\u001b[0m in \u001b[0;36mgenerate_from_frequencies\u001b[0;34m(self, frequencies, max_font_size)\u001b[0m\n\u001b[1;32m    424\u001b[0m             \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    425\u001b[0m                 self.generate_from_frequencies(dict(frequencies[:2]),\n\u001b[0;32m--> 426\u001b[0;31m                                                max_font_size=self.height)\n\u001b[0m\u001b[1;32m    427\u001b[0m                 \u001b[0;31m# find font sizes\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    428\u001b[0m                 \u001b[0msizes\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0mx\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0mx\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mlayout_\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.7/dist-packages/wordcloud/wordcloud.py\u001b[0m in \u001b[0;36mgenerate_from_frequencies\u001b[0;34m(self, frequencies, max_font_size)\u001b[0m\n\u001b[1;32m    476\u001b[0m                     font, orientation=orientation)\n\u001b[1;32m    477\u001b[0m                 \u001b[0;31m# get size of resulting text\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 478\u001b[0;31m                 \u001b[0mbox_size\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mdraw\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtextsize\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mword\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mfont\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mtransposed_font\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    479\u001b[0m                 \u001b[0;31m# find possible places using integral image:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    480\u001b[0m                 result = occupancy.sample_position(box_size[1] + self.margin,\n",
            "\u001b[0;32m/usr/local/lib/python3.7/dist-packages/PIL/ImageDraw.py\u001b[0m in \u001b[0;36mtextsize\u001b[0;34m(self, text, font, spacing, direction, features, language, stroke_width)\u001b[0m\n\u001b[1;32m    426\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mfont\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    427\u001b[0m             \u001b[0mfont\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mgetfont\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 428\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0mfont\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mgetsize\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtext\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdirection\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mfeatures\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlanguage\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mstroke_width\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    429\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    430\u001b[0m     def multiline_textsize(\n",
            "\u001b[0;32m/usr/local/lib/python3.7/dist-packages/PIL/ImageFont.py\u001b[0m in \u001b[0;36mgetsize\u001b[0;34m(self, text, *args, **kwargs)\u001b[0m\n\u001b[1;32m    568\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    569\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0mgetsize\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtext\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 570\u001b[0;31m         \u001b[0mw\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mh\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfont\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mgetsize\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtext\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    571\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0morientation\u001b[0m \u001b[0;32min\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0mImage\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mROTATE_90\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mImage\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mROTATE_270\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    572\u001b[0m             \u001b[0;32mreturn\u001b[0m \u001b[0mh\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mw\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.7/dist-packages/PIL/ImageFont.py\u001b[0m in \u001b[0;36mgetsize\u001b[0;34m(self, text, direction, features, language, stroke_width)\u001b[0m\n\u001b[1;32m    260\u001b[0m         \u001b[0;34m:\u001b[0m\u001b[0;32mreturn\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0mwidth\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mheight\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    261\u001b[0m         \"\"\"\n\u001b[0;32m--> 262\u001b[0;31m         \u001b[0msize\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0moffset\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfont\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mgetsize\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtext\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdirection\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mfeatures\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlanguage\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    263\u001b[0m         return (\n\u001b[1;32m    264\u001b[0m             \u001b[0msize\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m+\u001b[0m \u001b[0mstroke_width\u001b[0m \u001b[0;34m*\u001b[0m \u001b[0;36m2\u001b[0m \u001b[0;34m+\u001b[0m \u001b[0moffset\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mKeyboardInterrupt\u001b[0m: "
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 291
        },
        "id": "mqf4Qi8862Zr",
        "outputId": "4b2fbe69-9afb-43f3-96a6-edfdf53888b5"
      },
      "source": [
        "# Global WC\n",
        "\n",
        "WD = WordCloud(width = 9000, height = 3000,min_font_size = 10).generate(str(df['Text']))\n",
        "fig = plt.figure(1, figsize=(14, 8))\n",
        "plt.axis('off')\n",
        "plt.imshow(WD)\n",
        "plt.show()"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 1008x576 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "0XG4jdMr7XUY"
      },
      "source": [
        "## 3.1 ) FEELINGS ANALYSIS "
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 297
        },
        "id": "qfQf1CNc7e1r",
        "outputId": "55193c5f-12df-4ca3-bc3a-b454de1a21ea"
      },
      "source": [
        "# Histogram\n",
        "\n",
        "plt.figure(figsize=(8,4))\n",
        "sns.histplot(data=df, y=\"sentimiento\", bins=3, shrink=.9)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.axes._subplots.AxesSubplot at 0x7fd7a3811990>"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 83
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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\n",
            "text/plain": [
              "<Figure size 576x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "4tuLXJXo7pXj"
      },
      "source": [
        "If we consider that: \n",
        "\n",
        "\n",
        "*   A tweet is 'Positive' if it has a score between 0.2 and 1 --> [0.2, 1]\n",
        "*   A tweet is 'Neutral' if it has a score between -0.2 and 0.2 --> (-0.2, 0.2)\n",
        "*   A tweet is 'Negative' if it has a scote between -1 and -0.2 --> [-1, -0.2]\n",
        "\n",
        "We can generate a plot like this: \n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 292
        },
        "id": "1XXNQkPl8ehC",
        "outputId": "b2743351-4200-4a3f-fb23-a14d0367b73a"
      },
      "source": [
        "def target(x):\n",
        "  if (x >= 0.2) & (x <= 1):\n",
        "    x = 'Positive'\n",
        "  elif (x < 0.2) & (x > -0.2):\n",
        "    x = 'Neutral'\n",
        "  else:\n",
        "    x = 'Negative'\n",
        "  return x\n",
        "\n",
        "df['target'] = df['sentimiento'].apply(target)\n",
        "df.head()"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>ID</th>\n",
              "      <th>Text</th>\n",
              "      <th>Created time</th>\n",
              "      <th>Screen name</th>\n",
              "      <th>Run time</th>\n",
              "      <th>sentimiento</th>\n",
              "      <th>Text_without_stopwords</th>\n",
              "      <th>target</th>\n",
              "      <th>temp_list</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>1405101850387521539</td>\n",
              "      <td>MENCIÓN Me temo que de la Kitchen nos estamos ...</td>\n",
              "      <td>2021-06-16 11:56:01+00:00</td>\n",
              "      <td>RaulGuzzoConteG</td>\n",
              "      <td>2021-06-16 11:55:44.050461</td>\n",
              "      <td>-0.816334</td>\n",
              "      <td>Me temo Kitchen enterando 0.3%.</td>\n",
              "      <td>Negative</td>\n",
              "      <td>[Me, temo, Kitchen, enterando, 0.3%.]</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>1405101856192401413</td>\n",
              "      <td>MENCIÓN MENCIÓN JAJAJAJAJAJA</td>\n",
              "      <td>2021-06-16 11:56:02+00:00</td>\n",
              "      <td>paumolla02</td>\n",
              "      <td>2021-06-16 11:55:44.050461</td>\n",
              "      <td>-0.829416</td>\n",
              "      <td>JAJAJAJAJAJA</td>\n",
              "      <td>Negative</td>\n",
              "      <td>[JAJAJAJAJAJA]</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>1405101876744425474</td>\n",
              "      <td>@1777_1815_1865 MENCIÓN MENCIÓN Ce n est pas l...</td>\n",
              "      <td>2021-06-16 11:56:07+00:00</td>\n",
              "      <td>pesiss</td>\n",
              "      <td>2021-06-16 11:55:44.050461</td>\n",
              "      <td>-0.718711</td>\n",
              "      <td>@1777_1815_1865 Ce question, dire chaque fois ...</td>\n",
              "      <td>Negative</td>\n",
              "      <td>[@1777_1815_1865, Ce, question,, dire, chaque,...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>1405101878057259009</td>\n",
              "      <td>MENCIÓN MENCIÓN Siiii en mi corazón temalomejo...</td>\n",
              "      <td>2021-06-16 11:56:07+00:00</td>\n",
              "      <td>GemaBallestero5</td>\n",
              "      <td>2021-06-16 11:55:44.050461</td>\n",
              "      <td>-0.840319</td>\n",
              "      <td>Siiii corazón temalomejordenuestramúsica</td>\n",
              "      <td>Negative</td>\n",
              "      <td>[Siiii, corazón, temalomejordenuestramúsica]</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>1405101880376705026</td>\n",
              "      <td>Es amiguito de quién le paga más.</td>\n",
              "      <td>2021-06-16 11:56:08+00:00</td>\n",
              "      <td>margaser1</td>\n",
              "      <td>2021-06-16 11:55:44.050461</td>\n",
              "      <td>-0.595210</td>\n",
              "      <td>Es amiguito quién paga más.</td>\n",
              "      <td>Negative</td>\n",
              "      <td>[Es, amiguito, quién, paga, más.]</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "                    ID  ...                                          temp_list\n",
              "0  1405101850387521539  ...              [Me, temo, Kitchen, enterando, 0.3%.]\n",
              "1  1405101856192401413  ...                                     [JAJAJAJAJAJA]\n",
              "2  1405101876744425474  ...  [@1777_1815_1865, Ce, question,, dire, chaque,...\n",
              "3  1405101878057259009  ...       [Siiii, corazón, temalomejordenuestramúsica]\n",
              "4  1405101880376705026  ...                  [Es, amiguito, quién, paga, más.]\n",
              "\n",
              "[5 rows x 9 columns]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 84
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 112
        },
        "id": "_9caOgj584XK",
        "outputId": "da5e48f8-7331-4394-afd2-9ef634e2e2f0"
      },
      "source": [
        "count = pd.DataFrame(df['target'].value_counts())\n",
        "count"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>target</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>Negative</th>\n",
              "      <td>91</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Neutral</th>\n",
              "      <td>13</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "          target\n",
              "Negative      91\n",
              "Neutral       13"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 85
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 542
        },
        "id": "dKGzfBKsTV3t",
        "outputId": "33d79b3f-d6e3-4d11-c815-c452fa581b95"
      },
      "source": [
        "fig = go.Figure(go.Funnel(\n",
        "    y = count.index,\n",
        "    x = count.target))\n",
        "\n",
        "fig.show() "
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/html": [
              "<html>\n",
              "<head><meta charset=\"utf-8\" /></head>\n",
              "<body>\n",
              "    <div>\n",
              "            <script src=\"https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.5/MathJax.js?config=TeX-AMS-MML_SVG\"></script><script type=\"text/javascript\">if (window.MathJax) {MathJax.Hub.Config({SVG: {font: \"STIX-Web\"}});}</script>\n",
              "                <script type=\"text/javascript\">window.PlotlyConfig = {MathJaxConfig: 'local'};</script>\n",
              "        <script src=\"https://cdn.plot.ly/plotly-latest.min.js\"></script>    \n",
              "            <div id=\"07f85b10-1d50-4943-a574-8ea389e9b1b3\" class=\"plotly-graph-div\" style=\"height:525px; width:100%;\"></div>\n",
              "            <script type=\"text/javascript\">\n",
              "                \n",
              "                    window.PLOTLYENV=window.PLOTLYENV || {};\n",
              "                    \n",
              "                if (document.getElementById(\"07f85b10-1d50-4943-a574-8ea389e9b1b3\")) {\n",
              "                    Plotly.newPlot(\n",
              "                        '07f85b10-1d50-4943-a574-8ea389e9b1b3',\n",
              "                        [{\"type\": \"funnel\", \"x\": [91, 13], \"y\": [\"Negative\", \"Neutral\"]}],\n",
              "                        {\"template\": {\"data\": {\"bar\": [{\"error_x\": {\"color\": \"#2a3f5f\"}, \"error_y\": {\"color\": \"#2a3f5f\"}, \"marker\": {\"line\": {\"color\": \"#E5ECF6\", \"width\": 0.5}}, \"type\": \"bar\"}], \"barpolar\": [{\"marker\": {\"line\": {\"color\": \"#E5ECF6\", \"width\": 0.5}}, \"type\": \"barpolar\"}], \"carpet\": [{\"aaxis\": {\"endlinecolor\": \"#2a3f5f\", \"gridcolor\": \"white\", \"linecolor\": \"white\", \"minorgridcolor\": \"white\", \"startlinecolor\": \"#2a3f5f\"}, \"baxis\": {\"endlinecolor\": \"#2a3f5f\", \"gridcolor\": \"white\", \"linecolor\": \"white\", \"minorgridcolor\": \"white\", \"startlinecolor\": \"#2a3f5f\"}, \"type\": \"carpet\"}], \"choropleth\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"type\": \"choropleth\"}], \"contour\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"colorscale\": [[0.0, \"#0d0887\"], [0.1111111111111111, \"#46039f\"], [0.2222222222222222, \"#7201a8\"], [0.3333333333333333, \"#9c179e\"], [0.4444444444444444, \"#bd3786\"], [0.5555555555555556, \"#d8576b\"], [0.6666666666666666, \"#ed7953\"], [0.7777777777777778, \"#fb9f3a\"], [0.8888888888888888, \"#fdca26\"], [1.0, \"#f0f921\"]], \"type\": \"contour\"}], \"contourcarpet\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"type\": \"contourcarpet\"}], \"heatmap\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"colorscale\": [[0.0, \"#0d0887\"], [0.1111111111111111, \"#46039f\"], [0.2222222222222222, \"#7201a8\"], [0.3333333333333333, \"#9c179e\"], [0.4444444444444444, \"#bd3786\"], [0.5555555555555556, \"#d8576b\"], [0.6666666666666666, \"#ed7953\"], [0.7777777777777778, \"#fb9f3a\"], [0.8888888888888888, \"#fdca26\"], [1.0, \"#f0f921\"]], \"type\": \"heatmap\"}], \"heatmapgl\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"colorscale\": [[0.0, \"#0d0887\"], [0.1111111111111111, \"#46039f\"], [0.2222222222222222, \"#7201a8\"], [0.3333333333333333, \"#9c179e\"], [0.4444444444444444, \"#bd3786\"], [0.5555555555555556, \"#d8576b\"], [0.6666666666666666, \"#ed7953\"], [0.7777777777777778, \"#fb9f3a\"], [0.8888888888888888, \"#fdca26\"], [1.0, \"#f0f921\"]], \"type\": \"heatmapgl\"}], \"histogram\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"histogram\"}], \"histogram2d\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"colorscale\": [[0.0, \"#0d0887\"], [0.1111111111111111, \"#46039f\"], [0.2222222222222222, \"#7201a8\"], [0.3333333333333333, \"#9c179e\"], [0.4444444444444444, \"#bd3786\"], [0.5555555555555556, \"#d8576b\"], [0.6666666666666666, \"#ed7953\"], [0.7777777777777778, \"#fb9f3a\"], [0.8888888888888888, \"#fdca26\"], [1.0, \"#f0f921\"]], \"type\": \"histogram2d\"}], \"histogram2dcontour\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"colorscale\": [[0.0, \"#0d0887\"], [0.1111111111111111, \"#46039f\"], [0.2222222222222222, \"#7201a8\"], [0.3333333333333333, \"#9c179e\"], [0.4444444444444444, \"#bd3786\"], [0.5555555555555556, \"#d8576b\"], [0.6666666666666666, \"#ed7953\"], [0.7777777777777778, \"#fb9f3a\"], [0.8888888888888888, \"#fdca26\"], [1.0, \"#f0f921\"]], \"type\": \"histogram2dcontour\"}], \"mesh3d\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"type\": \"mesh3d\"}], \"parcoords\": [{\"line\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"parcoords\"}], \"pie\": [{\"automargin\": true, \"type\": \"pie\"}], \"scatter\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scatter\"}], \"scatter3d\": [{\"line\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scatter3d\"}], \"scattercarpet\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scattercarpet\"}], \"scattergeo\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scattergeo\"}], \"scattergl\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scattergl\"}], \"scattermapbox\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scattermapbox\"}], \"scatterpolar\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scatterpolar\"}], \"scatterpolargl\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scatterpolargl\"}], \"scatterternary\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scatterternary\"}], \"surface\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"colorscale\": [[0.0, \"#0d0887\"], [0.1111111111111111, \"#46039f\"], [0.2222222222222222, \"#7201a8\"], [0.3333333333333333, \"#9c179e\"], [0.4444444444444444, \"#bd3786\"], [0.5555555555555556, \"#d8576b\"], [0.6666666666666666, \"#ed7953\"], [0.7777777777777778, \"#fb9f3a\"], [0.8888888888888888, \"#fdca26\"], [1.0, \"#f0f921\"]], \"type\": \"surface\"}], \"table\": [{\"cells\": {\"fill\": {\"color\": \"#EBF0F8\"}, \"line\": {\"color\": \"white\"}}, \"header\": {\"fill\": {\"color\": \"#C8D4E3\"}, \"line\": {\"color\": \"white\"}}, \"type\": \"table\"}]}, \"layout\": {\"annotationdefaults\": {\"arrowcolor\": \"#2a3f5f\", \"arrowhead\": 0, \"arrowwidth\": 1}, \"coloraxis\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"colorscale\": {\"diverging\": [[0, \"#8e0152\"], [0.1, \"#c51b7d\"], [0.2, \"#de77ae\"], [0.3, \"#f1b6da\"], [0.4, \"#fde0ef\"], [0.5, \"#f7f7f7\"], [0.6, \"#e6f5d0\"], [0.7, \"#b8e186\"], [0.8, \"#7fbc41\"], [0.9, \"#4d9221\"], [1, \"#276419\"]], \"sequential\": [[0.0, \"#0d0887\"], [0.1111111111111111, \"#46039f\"], [0.2222222222222222, \"#7201a8\"], [0.3333333333333333, \"#9c179e\"], [0.4444444444444444, \"#bd3786\"], [0.5555555555555556, \"#d8576b\"], [0.6666666666666666, \"#ed7953\"], [0.7777777777777778, \"#fb9f3a\"], [0.8888888888888888, \"#fdca26\"], [1.0, \"#f0f921\"]], \"sequentialminus\": [[0.0, \"#0d0887\"], [0.1111111111111111, \"#46039f\"], [0.2222222222222222, \"#7201a8\"], [0.3333333333333333, \"#9c179e\"], [0.4444444444444444, \"#bd3786\"], [0.5555555555555556, \"#d8576b\"], [0.6666666666666666, \"#ed7953\"], [0.7777777777777778, \"#fb9f3a\"], [0.8888888888888888, \"#fdca26\"], [1.0, \"#f0f921\"]]}, \"colorway\": [\"#636efa\", \"#EF553B\", \"#00cc96\", \"#ab63fa\", \"#FFA15A\", \"#19d3f3\", \"#FF6692\", \"#B6E880\", \"#FF97FF\", \"#FECB52\"], \"font\": {\"color\": \"#2a3f5f\"}, \"geo\": {\"bgcolor\": \"white\", \"lakecolor\": \"white\", \"landcolor\": \"#E5ECF6\", \"showlakes\": true, \"showland\": true, \"subunitcolor\": \"white\"}, \"hoverlabel\": {\"align\": \"left\"}, \"hovermode\": \"closest\", \"mapbox\": {\"style\": \"light\"}, \"paper_bgcolor\": \"white\", \"plot_bgcolor\": \"#E5ECF6\", \"polar\": {\"angularaxis\": {\"gridcolor\": \"white\", \"linecolor\": \"white\", \"ticks\": \"\"}, \"bgcolor\": \"#E5ECF6\", \"radialaxis\": {\"gridcolor\": \"white\", \"linecolor\": \"white\", \"ticks\": \"\"}}, \"scene\": {\"xaxis\": {\"backgroundcolor\": \"#E5ECF6\", \"gridcolor\": \"white\", \"gridwidth\": 2, \"linecolor\": \"white\", \"showbackground\": true, \"ticks\": \"\", \"zerolinecolor\": \"white\"}, \"yaxis\": {\"backgroundcolor\": \"#E5ECF6\", \"gridcolor\": \"white\", \"gridwidth\": 2, \"linecolor\": \"white\", \"showbackground\": true, \"ticks\": \"\", \"zerolinecolor\": \"white\"}, \"zaxis\": {\"backgroundcolor\": \"#E5ECF6\", \"gridcolor\": \"white\", \"gridwidth\": 2, \"linecolor\": \"white\", \"showbackground\": true, \"ticks\": \"\", \"zerolinecolor\": \"white\"}}, \"shapedefaults\": {\"line\": {\"color\": \"#2a3f5f\"}}, \"ternary\": {\"aaxis\": {\"gridcolor\": \"white\", \"linecolor\": \"white\", \"ticks\": \"\"}, \"baxis\": {\"gridcolor\": \"white\", \"linecolor\": \"white\", \"ticks\": \"\"}, \"bgcolor\": \"#E5ECF6\", \"caxis\": {\"gridcolor\": \"white\", \"linecolor\": \"white\", \"ticks\": \"\"}}, \"title\": {\"x\": 0.05}, \"xaxis\": {\"automargin\": true, \"gridcolor\": \"white\", \"linecolor\": \"white\", \"ticks\": \"\", \"title\": {\"standoff\": 15}, \"zerolinecolor\": \"white\", \"zerolinewidth\": 2}, \"yaxis\": {\"automargin\": true, \"gridcolor\": \"white\", \"linecolor\": \"white\", \"ticks\": \"\", \"title\": {\"standoff\": 15}, \"zerolinecolor\": \"white\", \"zerolinewidth\": 2}}}},\n",
              "                        {\"responsive\": true}\n",
              "                    ).then(function(){\n",
              "                            \n",
              "var gd = document.getElementById('07f85b10-1d50-4943-a574-8ea389e9b1b3');\n",
              "var x = new MutationObserver(function (mutations, observer) {{\n",
              "        var display = window.getComputedStyle(gd).display;\n",
              "        if (!display || display === 'none') {{\n",
              "            console.log([gd, 'removed!']);\n",
              "            Plotly.purge(gd);\n",
              "            observer.disconnect();\n",
              "        }}\n",
              "}});\n",
              "\n",
              "// Listen for the removal of the full notebook cells\n",
              "var notebookContainer = gd.closest('#notebook-container');\n",
              "if (notebookContainer) {{\n",
              "    x.observe(notebookContainer, {childList: true});\n",
              "}}\n",
              "\n",
              "// Listen for the clearing of the current output cell\n",
              "var outputEl = gd.closest('.output');\n",
              "if (outputEl) {{\n",
              "    x.observe(outputEl, {childList: true});\n",
              "}}\n",
              "\n",
              "                        })\n",
              "                };\n",
              "                \n",
              "            </script>\n",
              "        </div>\n",
              "</body>\n",
              "</html>"
            ]
          },
          "metadata": {
            "tags": []
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Y0fpuVHN_0U7"
      },
      "source": [
        "#### 3.1.1) MOST FREQUENT WORDS: POSITIVE AND NEGATIVE\n",
        "There is the possibility of knowing which are the most frequent words, both positive and negative."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "CcV4QLZaBlyJ"
      },
      "source": [
        "pos = df[df['target']== 'Positive']\n",
        "neg = df[df['target']== 'Negative']"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "H5BsB9I3B78W",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 462
        },
        "outputId": "7eaababe-824a-479e-8c53-43c1521319f6"
      },
      "source": [
        "df['temp_list'] = df['Text_without_stopwords'].apply(lambda x:str(x).split())\n",
        "top = Counter([item for sublist in df['temp_list'] for item in sublist])\n",
        "\n",
        "temp = pd.DataFrame(top.most_common(20))\n",
        "temp.columns = ['Most Commun Word','Frequency']\n",
        "temp.style.background_gradient(cmap='Blues')"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<style  type=\"text/css\" >\n",
              "#T_541b71d2_cedb_11eb_b9c7_0242ac1c0002row0_col1,#T_541b71d2_cedb_11eb_b9c7_0242ac1c0002row1_col1{\n",
              "            background-color:  #08306b;\n",
              "            color:  #f1f1f1;\n",
              "        }#T_541b71d2_cedb_11eb_b9c7_0242ac1c0002row2_col1,#T_541b71d2_cedb_11eb_b9c7_0242ac1c0002row3_col1,#T_541b71d2_cedb_11eb_b9c7_0242ac1c0002row4_col1,#T_541b71d2_cedb_11eb_b9c7_0242ac1c0002row5_col1,#T_541b71d2_cedb_11eb_b9c7_0242ac1c0002row6_col1{\n",
              "            background-color:  #6aaed6;\n",
              "            color:  #000000;\n",
              "        }#T_541b71d2_cedb_11eb_b9c7_0242ac1c0002row7_col1,#T_541b71d2_cedb_11eb_b9c7_0242ac1c0002row8_col1,#T_541b71d2_cedb_11eb_b9c7_0242ac1c0002row9_col1,#T_541b71d2_cedb_11eb_b9c7_0242ac1c0002row10_col1,#T_541b71d2_cedb_11eb_b9c7_0242ac1c0002row11_col1,#T_541b71d2_cedb_11eb_b9c7_0242ac1c0002row12_col1,#T_541b71d2_cedb_11eb_b9c7_0242ac1c0002row13_col1,#T_541b71d2_cedb_11eb_b9c7_0242ac1c0002row14_col1,#T_541b71d2_cedb_11eb_b9c7_0242ac1c0002row15_col1,#T_541b71d2_cedb_11eb_b9c7_0242ac1c0002row16_col1,#T_541b71d2_cedb_11eb_b9c7_0242ac1c0002row17_col1,#T_541b71d2_cedb_11eb_b9c7_0242ac1c0002row18_col1,#T_541b71d2_cedb_11eb_b9c7_0242ac1c0002row19_col1{\n",
              "            background-color:  #f7fbff;\n",
              "            color:  #000000;\n",
              "        }</style><table id=\"T_541b71d2_cedb_11eb_b9c7_0242ac1c0002\" ><thead>    <tr>        <th class=\"blank level0\" ></th>        <th class=\"col_heading level0 col0\" >Most Commun Word</th>        <th class=\"col_heading level0 col1\" >Frequency</th>    </tr></thead><tbody>\n",
              "                <tr>\n",
              "                        <th id=\"T_541b71d2_cedb_11eb_b9c7_0242ac1c0002level0_row0\" class=\"row_heading level0 row0\" >0</th>\n",
              "                        <td id=\"T_541b71d2_cedb_11eb_b9c7_0242ac1c0002row0_col0\" class=\"data row0 col0\" >hace</td>\n",
              "                        <td id=\"T_541b71d2_cedb_11eb_b9c7_0242ac1c0002row0_col1\" class=\"data row0 col1\" >4</td>\n",
              "            </tr>\n",
              "            <tr>\n",
              "                        <th id=\"T_541b71d2_cedb_11eb_b9c7_0242ac1c0002level0_row1\" class=\"row_heading level0 row1\" >1</th>\n",
              "                        <td id=\"T_541b71d2_cedb_11eb_b9c7_0242ac1c0002row1_col0\" class=\"data row1 col0\" >aquí</td>\n",
              "                        <td id=\"T_541b71d2_cedb_11eb_b9c7_0242ac1c0002row1_col1\" class=\"data row1 col1\" >4</td>\n",
              "            </tr>\n",
              "            <tr>\n",
              "                        <th id=\"T_541b71d2_cedb_11eb_b9c7_0242ac1c0002level0_row2\" class=\"row_heading level0 row2\" >2</th>\n",
              "                        <td id=\"T_541b71d2_cedb_11eb_b9c7_0242ac1c0002row2_col0\" class=\"data row2 col0\" >boycott</td>\n",
              "                        <td id=\"T_541b71d2_cedb_11eb_b9c7_0242ac1c0002row2_col1\" class=\"data row2 col1\" >3</td>\n",
              "            </tr>\n",
              "            <tr>\n",
              "                        <th id=\"T_541b71d2_cedb_11eb_b9c7_0242ac1c0002level0_row3\" class=\"row_heading level0 row3\" >3</th>\n",
              "                        <td id=\"T_541b71d2_cedb_11eb_b9c7_0242ac1c0002row3_col0\" class=\"data row3 col0\" >x</td>\n",
              "                        <td id=\"T_541b71d2_cedb_11eb_b9c7_0242ac1c0002row3_col1\" class=\"data row3 col1\" >3</td>\n",
              "            </tr>\n",
              "            <tr>\n",
              "                        <th id=\"T_541b71d2_cedb_11eb_b9c7_0242ac1c0002level0_row4\" class=\"row_heading level0 row4\" >4</th>\n",
              "                        <td id=\"T_541b71d2_cedb_11eb_b9c7_0242ac1c0002row4_col0\" class=\"data row4 col0\" >plus</td>\n",
              "                        <td id=\"T_541b71d2_cedb_11eb_b9c7_0242ac1c0002row4_col1\" class=\"data row4 col1\" >3</td>\n",
              "            </tr>\n",
              "            <tr>\n",
              "                        <th id=\"T_541b71d2_cedb_11eb_b9c7_0242ac1c0002level0_row5\" class=\"row_heading level0 row5\" >5</th>\n",
              "                        <td id=\"T_541b71d2_cedb_11eb_b9c7_0242ac1c0002row5_col0\" class=\"data row5 col0\" >vamos</td>\n",
              "                        <td id=\"T_541b71d2_cedb_11eb_b9c7_0242ac1c0002row5_col1\" class=\"data row5 col1\" >3</td>\n",
              "            </tr>\n",
              "            <tr>\n",
              "                        <th id=\"T_541b71d2_cedb_11eb_b9c7_0242ac1c0002level0_row6\" class=\"row_heading level0 row6\" >6</th>\n",
              "                        <td id=\"T_541b71d2_cedb_11eb_b9c7_0242ac1c0002row6_col0\" class=\"data row6 col0\" >twitter</td>\n",
              "                        <td id=\"T_541b71d2_cedb_11eb_b9c7_0242ac1c0002row6_col1\" class=\"data row6 col1\" >3</td>\n",
              "            </tr>\n",
              "            <tr>\n",
              "                        <th id=\"T_541b71d2_cedb_11eb_b9c7_0242ac1c0002level0_row7\" class=\"row_heading level0 row7\" >7</th>\n",
              "                        <td id=\"T_541b71d2_cedb_11eb_b9c7_0242ac1c0002row7_col0\" class=\"data row7 col0\" >temakerembürsın</td>\n",
              "                        <td id=\"T_541b71d2_cedb_11eb_b9c7_0242ac1c0002row7_col1\" class=\"data row7 col1\" >2</td>\n",
              "            </tr>\n",
              "            <tr>\n",
              "                        <th id=\"T_541b71d2_cedb_11eb_b9c7_0242ac1c0002level0_row8\" class=\"row_heading level0 row8\" >8</th>\n",
              "                        <td id=\"T_541b71d2_cedb_11eb_b9c7_0242ac1c0002row8_col0\" class=\"data row8 col0\" >4</td>\n",
              "                        <td id=\"T_541b71d2_cedb_11eb_b9c7_0242ac1c0002row8_col1\" class=\"data row8 col1\" >2</td>\n",
              "            </tr>\n",
              "            <tr>\n",
              "                        <th id=\"T_541b71d2_cedb_11eb_b9c7_0242ac1c0002level0_row9\" class=\"row_heading level0 row9\" >9</th>\n",
              "                        <td id=\"T_541b71d2_cedb_11eb_b9c7_0242ac1c0002row9_col0\" class=\"data row9 col0\" >19</td>\n",
              "                        <td id=\"T_541b71d2_cedb_11eb_b9c7_0242ac1c0002row9_col1\" class=\"data row9 col1\" >2</td>\n",
              "            </tr>\n",
              "            <tr>\n",
              "                        <th id=\"T_541b71d2_cedb_11eb_b9c7_0242ac1c0002level0_row10\" class=\"row_heading level0 row10\" >10</th>\n",
              "                        <td id=\"T_541b71d2_cedb_11eb_b9c7_0242ac1c0002row10_col0\" class=\"data row10 col0\" >derecho</td>\n",
              "                        <td id=\"T_541b71d2_cedb_11eb_b9c7_0242ac1c0002row10_col1\" class=\"data row10 col1\" >2</td>\n",
              "            </tr>\n",
              "            <tr>\n",
              "                        <th id=\"T_541b71d2_cedb_11eb_b9c7_0242ac1c0002level0_row11\" class=\"row_heading level0 row11\" >11</th>\n",
              "                        <td id=\"T_541b71d2_cedb_11eb_b9c7_0242ac1c0002row11_col0\" class=\"data row11 col0\" >ser</td>\n",
              "                        <td id=\"T_541b71d2_cedb_11eb_b9c7_0242ac1c0002row11_col1\" class=\"data row11 col1\" >2</td>\n",
              "            </tr>\n",
              "            <tr>\n",
              "                        <th id=\"T_541b71d2_cedb_11eb_b9c7_0242ac1c0002level0_row12\" class=\"row_heading level0 row12\" >12</th>\n",
              "                        <td id=\"T_541b71d2_cedb_11eb_b9c7_0242ac1c0002row12_col0\" class=\"data row12 col0\" >produits</td>\n",
              "                        <td id=\"T_541b71d2_cedb_11eb_b9c7_0242ac1c0002row12_col1\" class=\"data row12 col1\" >2</td>\n",
              "            </tr>\n",
              "            <tr>\n",
              "                        <th id=\"T_541b71d2_cedb_11eb_b9c7_0242ac1c0002level0_row13\" class=\"row_heading level0 row13\" >13</th>\n",
              "                        <td id=\"T_541b71d2_cedb_11eb_b9c7_0242ac1c0002row13_col0\" class=\"data row13 col0\" >français</td>\n",
              "                        <td id=\"T_541b71d2_cedb_11eb_b9c7_0242ac1c0002row13_col1\" class=\"data row13 col1\" >2</td>\n",
              "            </tr>\n",
              "            <tr>\n",
              "                        <th id=\"T_541b71d2_cedb_11eb_b9c7_0242ac1c0002level0_row14\" class=\"row_heading level0 row14\" >14</th>\n",
              "                        <td id=\"T_541b71d2_cedb_11eb_b9c7_0242ac1c0002row14_col0\" class=\"data row14 col0\" >émiratis</td>\n",
              "                        <td id=\"T_541b71d2_cedb_11eb_b9c7_0242ac1c0002row14_col1\" class=\"data row14 col1\" >2</td>\n",
              "            </tr>\n",
              "            <tr>\n",
              "                        <th id=\"T_541b71d2_cedb_11eb_b9c7_0242ac1c0002level0_row15\" class=\"row_heading level0 row15\" >15</th>\n",
              "                        <td id=\"T_541b71d2_cedb_11eb_b9c7_0242ac1c0002row15_col0\" class=\"data row15 col0\" >vivre</td>\n",
              "                        <td id=\"T_541b71d2_cedb_11eb_b9c7_0242ac1c0002row15_col1\" class=\"data row15 col1\" >2</td>\n",
              "            </tr>\n",
              "            <tr>\n",
              "                        <th id=\"T_541b71d2_cedb_11eb_b9c7_0242ac1c0002level0_row16\" class=\"row_heading level0 row16\" >16</th>\n",
              "                        <td id=\"T_541b71d2_cedb_11eb_b9c7_0242ac1c0002row16_col0\" class=\"data row16 col0\" >pp</td>\n",
              "                        <td id=\"T_541b71d2_cedb_11eb_b9c7_0242ac1c0002row16_col1\" class=\"data row16 col1\" >2</td>\n",
              "            </tr>\n",
              "            <tr>\n",
              "                        <th id=\"T_541b71d2_cedb_11eb_b9c7_0242ac1c0002level0_row17\" class=\"row_heading level0 row17\" >17</th>\n",
              "                        <td id=\"T_541b71d2_cedb_11eb_b9c7_0242ac1c0002row17_col0\" class=\"data row17 col0\" >e…</td>\n",
              "                        <td id=\"T_541b71d2_cedb_11eb_b9c7_0242ac1c0002row17_col1\" class=\"data row17 col1\" >2</td>\n",
              "            </tr>\n",
              "            <tr>\n",
              "                        <th id=\"T_541b71d2_cedb_11eb_b9c7_0242ac1c0002level0_row18\" class=\"row_heading level0 row18\" >18</th>\n",
              "                        <td id=\"T_541b71d2_cedb_11eb_b9c7_0242ac1c0002row18_col0\" class=\"data row18 col0\" >ate</td>\n",
              "                        <td id=\"T_541b71d2_cedb_11eb_b9c7_0242ac1c0002row18_col1\" class=\"data row18 col1\" >2</td>\n",
              "            </tr>\n",
              "            <tr>\n",
              "                        <th id=\"T_541b71d2_cedb_11eb_b9c7_0242ac1c0002level0_row19\" class=\"row_heading level0 row19\" >19</th>\n",
              "                        <td id=\"T_541b71d2_cedb_11eb_b9c7_0242ac1c0002row19_col0\" class=\"data row19 col0\" >segundos</td>\n",
              "                        <td id=\"T_541b71d2_cedb_11eb_b9c7_0242ac1c0002row19_col1\" class=\"data row19 col1\" >2</td>\n",
              "            </tr>\n",
              "    </tbody></table>"
            ],
            "text/plain": [
              "<pandas.io.formats.style.Styler at 0x7fd7a50e1ed0>"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 94
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "puAh5GyxJzIT"
      },
      "source": [
        "### 3.2 ) HATE CURVE"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 281
        },
        "id": "5CPcVfdMRrqF",
        "outputId": "60f66d49-7acb-443e-bc03-47ba4cbd2b90"
      },
      "source": [
        "df['sentimiento'].cumsum().plot()"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.axes._subplots.AxesSubplot at 0x7f53905bb850>"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 28
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "SZ3MIUqbKiYO"
      },
      "source": [
        "# 4 ) HATE CURVE (TIME)"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "m6-yn4C0K8hy"
      },
      "source": [
        "# Select Frames the 30 min duration with 3 hours of separation \n",
        "# Load the CSV with tweets of interest\n",
        "\n",
        "\n"
      ],
      "execution_count": null,
      "outputs": []
    }
  ]
}